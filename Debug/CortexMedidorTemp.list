
CortexMedidorTemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800625c  0800625c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800625c  0800625c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800625c  0800625c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006260  08006260  00016260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000117c  20000074  080062d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f0  080062d8  000211f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015349  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000309b  00000000  00000000  000353e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  00038488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  00039778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a235  00000000  00000000  0003a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f4af  00000000  00000000  00054b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000977f5  00000000  00000000  00063fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb7c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  000fb844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ee8 	.word	0x08005ee8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005ee8 	.word	0x08005ee8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	200000e4 	.word	0x200000e4

08000180 <diftep>:
static void next(struct leitorAD* this);
static void writeBuffer(struct leitorAD* this,int num);
static int calcMedia(struct leitorAD* this);
static int getTemp(struct leitorAD* this);
static int difTemp(struct leitorAD* this, struct leitorAD* other);
static int diftep(int a,int b){int n = a-b;return n<0?-n:n;}
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	6039      	str	r1, [r7, #0]
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	1ad3      	subs	r3, r2, r3
 8000190:	60fb      	str	r3, [r7, #12]
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	2b00      	cmp	r3, #0
 8000196:	bfb8      	it	lt
 8000198:	425b      	neglt	r3, r3
 800019a:	4618      	mov	r0, r3
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a4:	b5b0      	push	{r4, r5, r7, lr}
 80001a6:	b09c      	sub	sp, #112	; 0x70
 80001a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001aa:	f000 fe0b 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ae:	f000 f883 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b2:	f000 f983 	bl	80004bc <MX_GPIO_Init>
  MX_SPI1_Init();
 80001b6:	f000 f94b 	bl	8000450 <MX_SPI1_Init>
  MX_ADC1_Init();
 80001ba:	f000 f8cd 	bl	8000358 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001be:	f000 f909 	bl	80003d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  init(&ad1);
 80001c2:	4832      	ldr	r0, [pc, #200]	; (800028c <main+0xe8>)
 80001c4:	f000 f9fa 	bl	80005bc <init>
  init(&ad2);
 80001c8:	4831      	ldr	r0, [pc, #196]	; (8000290 <main+0xec>)
 80001ca:	f000 f9f7 	bl	80005bc <init>
//  LCD_Write_String(0,0, "teste");
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexS01 */
  osMutexDef(MutexS01);
 80001ce:	2300      	movs	r3, #0
 80001d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80001d2:	2300      	movs	r3, #0
 80001d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  MutexS01Handle = osMutexCreate(osMutex(MutexS01));
 80001d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 ff91 	bl	8003102 <osMutexCreate>
 80001e0:	4602      	mov	r2, r0
 80001e2:	4b2c      	ldr	r3, [pc, #176]	; (8000294 <main+0xf0>)
 80001e4:	601a      	str	r2, [r3, #0]

  /* definition and creation of MutexS02 */
  osMutexDef(MutexS02);
 80001e6:	2300      	movs	r3, #0
 80001e8:	663b      	str	r3, [r7, #96]	; 0x60
 80001ea:	2300      	movs	r3, #0
 80001ec:	667b      	str	r3, [r7, #100]	; 0x64
  MutexS02Handle = osMutexCreate(osMutex(MutexS02));
 80001ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 ff85 	bl	8003102 <osMutexCreate>
 80001f8:	4602      	mov	r2, r0
 80001fa:	4b27      	ldr	r3, [pc, #156]	; (8000298 <main+0xf4>)
 80001fc:	601a      	str	r2, [r3, #0]

  /* definition and creation of MutexSerial */
  osMutexDef(MutexSerial);
 80001fe:	2300      	movs	r3, #0
 8000200:	65bb      	str	r3, [r7, #88]	; 0x58
 8000202:	2300      	movs	r3, #0
 8000204:	65fb      	str	r3, [r7, #92]	; 0x5c
  MutexSerialHandle = osMutexCreate(osMutex(MutexSerial));
 8000206:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800020a:	4618      	mov	r0, r3
 800020c:	f002 ff79 	bl	8003102 <osMutexCreate>
 8000210:	4602      	mov	r2, r0
 8000212:	4b22      	ldr	r3, [pc, #136]	; (800029c <main+0xf8>)
 8000214:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sensor01Task */
  osThreadDef(sensor01Task, StartSensor01Task, osPriorityNormal, 0, 128);
 8000216:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <main+0xfc>)
 8000218:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800021c:	461d      	mov	r5, r3
 800021e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000222:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensor01TaskHandle = osThreadCreate(osThread(sensor01Task), NULL);
 800022a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f002 ff06 	bl	8003042 <osThreadCreate>
 8000236:	4602      	mov	r2, r0
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <main+0x100>)
 800023a:	601a      	str	r2, [r3, #0]

  /* definition and creation of sensor02Task */
  osThreadDef(sensor02Task, StartSensor02Task, osPriorityIdle, 0, 128);
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <main+0x104>)
 800023e:	f107 0420 	add.w	r4, r7, #32
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensor02TaskHandle = osThreadCreate(osThread(sensor02Task), NULL);
 8000250:	f107 0320 	add.w	r3, r7, #32
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fef3 	bl	8003042 <osThreadCreate>
 800025c:	4602      	mov	r2, r0
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <main+0x108>)
 8000260:	601a      	str	r2, [r3, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartdisplayTask, osPriorityIdle, 0, 128);
 8000262:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <main+0x10c>)
 8000264:	1d3c      	adds	r4, r7, #4
 8000266:	461d      	mov	r5, r3
 8000268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f002 fee2 	bl	8003042 <osThreadCreate>
 800027e:	4602      	mov	r2, r0
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <main+0x110>)
 8000282:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000284:	f002 fed6 	bl	8003034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000288:	e7fe      	b.n	8000288 <main+0xe4>
 800028a:	bf00      	nop
 800028c:	20001074 	.word	0x20001074
 8000290:	20001118 	.word	0x20001118
 8000294:	20001110 	.word	0x20001110
 8000298:	200010a4 	.word	0x200010a4
 800029c:	20001070 	.word	0x20001070
 80002a0:	08005f10 	.word	0x08005f10
 80002a4:	20001114 	.word	0x20001114
 80002a8:	08005f3c 	.word	0x08005f3c
 80002ac:	200010d8 	.word	0x200010d8
 80002b0:	08005f64 	.word	0x08005f64
 80002b4:	2000106c 	.word	0x2000106c

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b094      	sub	sp, #80	; 0x50
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f005 f9fd 	bl	80056c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e8:	2302      	movs	r3, #2
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	2310      	movs	r3, #16
 80002f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f4:	2300      	movs	r3, #0
 80002f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fc:	4618      	mov	r0, r3
 80002fe:	f001 fc17 	bl	8001b30 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000308:	f000 fab0 	bl	800086c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000310:	2300      	movs	r3, #0
 8000312:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fe82 	bl	8002030 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000332:	f000 fa9b 	bl	800086c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000336:	2302      	movs	r3, #2
 8000338:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f002 f82d 	bl	80023a0 <HAL_RCCEx_PeriphCLKConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800034c:	f000 fa8e 	bl	800086c <Error_Handler>
  }
}
 8000350:	bf00      	nop
 8000352:	3750      	adds	r7, #80	; 0x50
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_ADC1_Init+0x74>)
 800036a:	4a19      	ldr	r2, [pc, #100]	; (80003d0 <MX_ADC1_Init+0x78>)
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_ADC1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_ADC1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_ADC1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_ADC1_Init+0x74>)
 8000382:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000386:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_ADC1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_ADC1_Init+0x74>)
 8000390:	2201      	movs	r2, #1
 8000392:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <MX_ADC1_Init+0x74>)
 8000396:	f000 fd69 	bl	8000e6c <HAL_ADC_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003a0:	f000 fa64 	bl	800086c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_ADC1_Init+0x74>)
 80003b6:	f000 ffe5 	bl	8001384 <HAL_ADC_ConfigChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003c0:	f000 fa54 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	200010a8 	.word	0x200010a8
 80003d0:	40012400 	.word	0x40012400

080003d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_ADC2_Init+0x74>)
 80003e6:	4a19      	ldr	r2, [pc, #100]	; (800044c <MX_ADC2_Init+0x78>)
 80003e8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ea:	4b17      	ldr	r3, [pc, #92]	; (8000448 <MX_ADC2_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_ADC2_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_ADC2_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <MX_ADC2_Init+0x74>)
 80003fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000402:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <MX_ADC2_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_ADC2_Init+0x74>)
 800040c:	2201      	movs	r2, #1
 800040e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <MX_ADC2_Init+0x74>)
 8000412:	f000 fd2b 	bl	8000e6c <HAL_ADC_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800041c:	f000 fa26 	bl	800086c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000420:	2302      	movs	r3, #2
 8000422:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000424:	2301      	movs	r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4619      	mov	r1, r3
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_ADC2_Init+0x74>)
 8000432:	f000 ffa7 	bl	8001384 <HAL_ADC_ConfigChannel>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800043c:	f000 fa16 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000440:	bf00      	nop
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	2000103c 	.word	0x2000103c
 800044c:	40012800 	.word	0x40012800

08000450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000454:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <MX_SPI1_Init+0x64>)
 8000456:	4a18      	ldr	r2, [pc, #96]	; (80004b8 <MX_SPI1_Init+0x68>)
 8000458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800045a:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_SPI1_Init+0x64>)
 800045c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_SPI1_Init+0x64>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <MX_SPI1_Init+0x64>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_SPI1_Init+0x64>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_SPI1_Init+0x64>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_SPI1_Init+0x64>)
 800047c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_SPI1_Init+0x64>)
 8000484:	2218      	movs	r2, #24
 8000486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <MX_SPI1_Init+0x64>)
 800048a:	2200      	movs	r2, #0
 800048c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_SPI1_Init+0x64>)
 8000490:	2200      	movs	r2, #0
 8000492:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <MX_SPI1_Init+0x64>)
 8000496:	2200      	movs	r2, #0
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_SPI1_Init+0x64>)
 800049c:	220a      	movs	r2, #10
 800049e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <MX_SPI1_Init+0x64>)
 80004a2:	f002 f8ef 	bl	8002684 <HAL_SPI_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004ac:	f000 f9de 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20001148 	.word	0x20001148
 80004b8:	40013000 	.word	0x40013000

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d0:	4b21      	ldr	r3, [pc, #132]	; (8000558 <MX_GPIO_Init+0x9c>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a20      	ldr	r2, [pc, #128]	; (8000558 <MX_GPIO_Init+0x9c>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <MX_GPIO_Init+0x9c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0310 	and.w	r3, r3, #16
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_GPIO_Init+0x9c>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <MX_GPIO_Init+0x9c>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_GPIO_Init+0x9c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000506:	4815      	ldr	r0, [pc, #84]	; (800055c <MX_GPIO_Init+0xa0>)
 8000508:	f001 fafa 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2119      	movs	r1, #25
 8000510:	4813      	ldr	r0, [pc, #76]	; (8000560 <MX_GPIO_Init+0xa4>)
 8000512:	f001 faf5 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2302      	movs	r3, #2
 8000526:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	4619      	mov	r1, r3
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <MX_GPIO_Init+0xa0>)
 8000530:	f001 f98c 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CE_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin;
 8000534:	2319      	movs	r3, #25
 8000536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2302      	movs	r3, #2
 8000542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	4619      	mov	r1, r3
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_GPIO_Init+0xa4>)
 800054c:	f001 f97e 	bl	800184c <HAL_GPIO_Init>

}
 8000550:	bf00      	nop
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000
 800055c:	40011000 	.word	0x40011000
 8000560:	40010800 	.word	0x40010800

08000564 <adRead>:

/* USER CODE BEGIN 4 */
static int32_t adRead(ADC_HandleTypeDef* hadc){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc);
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f000 fd55 	bl	800101c <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(hadc, 5)!= HAL_OK){}
 8000572:	bf00      	nop
 8000574:	2105      	movs	r1, #5
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 fdfe 	bl	8001178 <HAL_ADC_PollForConversion>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f8      	bne.n	8000574 <adRead+0x10>
	return HAL_ADC_GetValue(hadc);
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 fef2 	bl	800136c <HAL_ADC_GetValue>
 8000588:	4603      	mov	r3, r0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <next>:
static void next(struct leitorAD* this){
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
	this->current=(this->current+1)%this->length;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059e:	3301      	adds	r3, #1
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80005a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80005a8:	fb02 f201 	mul.w	r2, r2, r1
 80005ac:	1a9a      	subs	r2, r3, r2
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <init>:
static void init(struct leitorAD* this){
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	this->current =0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	62da      	str	r2, [r3, #44]	; 0x2c
	this->length =10;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	220a      	movs	r2, #10
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
	for(int i =0 ;i<this->length;i++){
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	e007      	b.n	80005e6 <init+0x2a>
		this->buffer[i]=0;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	2100      	movs	r1, #0
 80005dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i =0 ;i<this->length;i++){
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf2      	blt.n	80005d6 <init+0x1a>
	}
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <writeBuffer>:
static void writeBuffer(struct leitorAD* this,int num){
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
	this->buffer[this->current]=num;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6839      	ldr	r1, [r7, #0]
 800060c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	next(this);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ffbe 	bl	8000592 <next>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <calcMedia>:
static int calcMedia(struct leitorAD* this){
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	int soma =0;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<this->length;i++){
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	e009      	b.n	8000644 <calcMedia+0x26>
		soma += this->buffer[i];
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4413      	add	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<this->length;i++){
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	3301      	adds	r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	429a      	cmp	r2, r3
 800064c:	dbf0      	blt.n	8000630 <calcMedia+0x12>
	}
	return soma/this->length;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
	...

08000664 <getTemp>:
static int getTemp(struct leitorAD* this){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	return 100*calcMedia(this)/4095;
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ffd6 	bl	800061e <calcMedia>
 8000672:	4602      	mov	r2, r0
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	fb03 f302 	mul.w	r3, r3, r2
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <getTemp+0x2c>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	441a      	add	r2, r3
 8000682:	12d2      	asrs	r2, r2, #11
 8000684:	17db      	asrs	r3, r3, #31
 8000686:	1ad3      	subs	r3, r2, r3
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	80080081 	.word	0x80080081

08000694 <writeSafe>:
static int difTemp(struct leitorAD* this, struct leitorAD* other){
	int val = getTemp(this)-getTemp(other);
	return val<0?-val:val;
}
static void writeSafe(struct leitorAD* this,osMutexId* mutex,ADC_HandleTypeDef* hadc){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	osMutexWait(*mutex, 100);
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2164      	movs	r1, #100	; 0x64
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fd44 	bl	8003134 <osMutexWait>
	writeBuffer(this, adRead(hadc));
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ff59 	bl	8000564 <adRead>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4619      	mov	r1, r3
 80006b6:	68f8      	ldr	r0, [r7, #12]
 80006b8:	f7ff ff9f 	bl	80005fa <writeBuffer>
	osMutexRelease(*mutex);
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fd85 	bl	80031d0 <osMutexRelease>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <getSafe>:
static int getSafe(struct leitorAD* this,osMutexId* mutex){
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
	osMutexWait(*mutex, 150);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2196      	movs	r1, #150	; 0x96
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fd28 	bl	8003134 <osMutexWait>
	int temp = getTemp(this);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ffbd 	bl	8000664 <getTemp>
 80006ea:	60f8      	str	r0, [r7, #12]
	osMutexRelease(*mutex);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fd6d 	bl	80031d0 <osMutexRelease>
	return temp;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <writeSerialSafe>:
static void writeSerialSafe(int line,char* word){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	osMutexWait(MutexSerialHandle, 100);
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <writeSerialSafe+0x38>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2164      	movs	r1, #100	; 0x64
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fd0f 	bl	8003134 <osMutexWait>
	LCD_Write_String(0, line, word);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	2000      	movs	r0, #0
 8000720:	f000 faba 	bl	8000c98 <LCD_Write_String>
	osMutexRelease(MutexSerialHandle);
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <writeSerialSafe+0x38>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fd51 	bl	80031d0 <osMutexRelease>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20001070 	.word	0x20001070

0800073c <StartSensor01Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSensor01Task */
void StartSensor01Task(void const * argument)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  writeSafe(&ad1, &MutexS01Handle, &hadc1);
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <StartSensor01Task+0x1c>)
 8000746:	4905      	ldr	r1, [pc, #20]	; (800075c <StartSensor01Task+0x20>)
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <StartSensor01Task+0x24>)
 800074a:	f7ff ffa3 	bl	8000694 <writeSafe>
	  osDelay(300);
 800074e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000752:	f002 fcc2 	bl	80030da <osDelay>
	  writeSafe(&ad1, &MutexS01Handle, &hadc1);
 8000756:	e7f5      	b.n	8000744 <StartSensor01Task+0x8>
 8000758:	200010a8 	.word	0x200010a8
 800075c:	20001110 	.word	0x20001110
 8000760:	20001074 	.word	0x20001074

08000764 <StartSensor02Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensor02Task */
void StartSensor02Task(void const * argument)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensor02Task */
  /* Infinite loop */
  for(;;)
  {
	writeSafe(&ad2, &MutexS02Handle, &hadc2);
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <StartSensor02Task+0x1c>)
 800076e:	4905      	ldr	r1, [pc, #20]	; (8000784 <StartSensor02Task+0x20>)
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <StartSensor02Task+0x24>)
 8000772:	f7ff ff8f 	bl	8000694 <writeSafe>
    osDelay(300);
 8000776:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800077a:	f002 fcae 	bl	80030da <osDelay>
	writeSafe(&ad2, &MutexS02Handle, &hadc2);
 800077e:	e7f5      	b.n	800076c <StartSensor02Task+0x8>
 8000780:	2000103c 	.word	0x2000103c
 8000784:	200010a4 	.word	0x200010a4
 8000788:	20001118 	.word	0x20001118

0800078c <StartdisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartdisplayTask */
void StartdisplayTask(void const * argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartdisplayTask */
  /* Infinite loop */
	LCD_Init();
 8000794:	f000 f9fa 	bl	8000b8c <LCD_Init>
	LCD_Write_String(0, 0, "Temperatura:");
 8000798:	4a20      	ldr	r2, [pc, #128]	; (800081c <StartdisplayTask+0x90>)
 800079a:	2100      	movs	r1, #0
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fa7b 	bl	8000c98 <LCD_Write_String>
  for(;;)
  {
	int t1= getSafe(&ad1, &MutexS01Handle);
 80007a2:	491f      	ldr	r1, [pc, #124]	; (8000820 <StartdisplayTask+0x94>)
 80007a4:	481f      	ldr	r0, [pc, #124]	; (8000824 <StartdisplayTask+0x98>)
 80007a6:	f7ff ff92 	bl	80006ce <getSafe>
 80007aa:	60f8      	str	r0, [r7, #12]
	int t2= getSafe(&ad2, &MutexS02Handle);
 80007ac:	491e      	ldr	r1, [pc, #120]	; (8000828 <StartdisplayTask+0x9c>)
 80007ae:	481f      	ldr	r0, [pc, #124]	; (800082c <StartdisplayTask+0xa0>)
 80007b0:	f7ff ff8d 	bl	80006ce <getSafe>
 80007b4:	60b8      	str	r0, [r7, #8]
	sprintf(buffer,"T1 %03d C",t1);
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	491d      	ldr	r1, [pc, #116]	; (8000830 <StartdisplayTask+0xa4>)
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <StartdisplayTask+0xa8>)
 80007bc:	f004 ff8c 	bl	80056d8 <siprintf>
	writeSerialSafe(1, buffer);
 80007c0:	491c      	ldr	r1, [pc, #112]	; (8000834 <StartdisplayTask+0xa8>)
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff ff9c 	bl	8000700 <writeSerialSafe>
	sprintf(buffer,"T2 %03d C",t2);
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	491b      	ldr	r1, [pc, #108]	; (8000838 <StartdisplayTask+0xac>)
 80007cc:	4819      	ldr	r0, [pc, #100]	; (8000834 <StartdisplayTask+0xa8>)
 80007ce:	f004 ff83 	bl	80056d8 <siprintf>
	writeSerialSafe(2, buffer);
 80007d2:	4918      	ldr	r1, [pc, #96]	; (8000834 <StartdisplayTask+0xa8>)
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff ff93 	bl	8000700 <writeSerialSafe>
	if(diftep(t1, t2)>10){
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f7ff fccf 	bl	8000180 <diftep>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b0a      	cmp	r3, #10
 80007e6:	dd0a      	ble.n	80007fe <StartdisplayTask+0x72>
		writeSerialSafe(3, "Alerta");
 80007e8:	4914      	ldr	r1, [pc, #80]	; (800083c <StartdisplayTask+0xb0>)
 80007ea:	2003      	movs	r0, #3
 80007ec:	f7ff ff88 	bl	8000700 <writeSerialSafe>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4812      	ldr	r0, [pc, #72]	; (8000840 <StartdisplayTask+0xb4>)
 80007f8:	f001 f982 	bl	8001b00 <HAL_GPIO_WritePin>
 80007fc:	e009      	b.n	8000812 <StartdisplayTask+0x86>
	}else{
		writeSerialSafe(3, "------");
 80007fe:	4911      	ldr	r1, [pc, #68]	; (8000844 <StartdisplayTask+0xb8>)
 8000800:	2003      	movs	r0, #3
 8000802:	f7ff ff7d 	bl	8000700 <writeSerialSafe>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <StartdisplayTask+0xb4>)
 800080e:	f001 f977 	bl	8001b00 <HAL_GPIO_WritePin>
	}
	osDelay(5000);
 8000812:	f241 3088 	movw	r0, #5000	; 0x1388
 8000816:	f002 fc60 	bl	80030da <osDelay>
  {
 800081a:	e7c2      	b.n	80007a2 <StartdisplayTask+0x16>
 800081c:	08005f80 	.word	0x08005f80
 8000820:	20001110 	.word	0x20001110
 8000824:	20001074 	.word	0x20001074
 8000828:	200010a4 	.word	0x200010a4
 800082c:	20001118 	.word	0x20001118
 8000830:	08005f90 	.word	0x08005f90
 8000834:	200010dc 	.word	0x200010dc
 8000838:	08005f9c 	.word	0x08005f9c
 800083c:	08005fa8 	.word	0x08005fa8
 8000840:	40011000 	.word	0x40011000
 8000844:	08005fb0 	.word	0x08005fb0

08000848 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d101      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085a:	f000 fac9 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40012c00 	.word	0x40012c00

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_MspInit+0x5c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <HAL_MspInit+0x5c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_MspInit+0x5c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x5c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_MspInit+0x5c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x5c>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_MspInit+0x60>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_MspInit+0x60>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010000 	.word	0x40010000

080008dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a28      	ldr	r2, [pc, #160]	; (8000998 <HAL_ADC_MspInit+0xbc>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d122      	bne.n	8000942 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <HAL_ADC_MspInit+0xc0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a26      	ldr	r2, [pc, #152]	; (800099c <HAL_ADC_MspInit+0xc0>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <HAL_ADC_MspInit+0xc0>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_ADC_MspInit+0xc0>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a20      	ldr	r2, [pc, #128]	; (800099c <HAL_ADC_MspInit+0xc0>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_ADC_MspInit+0xc0>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000930:	2303      	movs	r3, #3
 8000932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4619      	mov	r1, r3
 800093a:	4819      	ldr	r0, [pc, #100]	; (80009a0 <HAL_ADC_MspInit+0xc4>)
 800093c:	f000 ff86 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000940:	e026      	b.n	8000990 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_ADC_MspInit+0xc8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d121      	bne.n	8000990 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0xc0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_ADC_MspInit+0xc0>)
 8000952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_ADC_MspInit+0xc0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_ADC_MspInit+0xc0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <HAL_ADC_MspInit+0xc0>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_ADC_MspInit+0xc0>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097c:	2304      	movs	r3, #4
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000980:	2303      	movs	r3, #3
 8000982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <HAL_ADC_MspInit+0xc4>)
 800098c:	f000 ff5e 	bl	800184c <HAL_GPIO_Init>
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40012400 	.word	0x40012400
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010800 	.word	0x40010800
 80009a4:	40012800 	.word	0x40012800

080009a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_SPI_MspInit+0x70>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d123      	bne.n	8000a10 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_SPI_MspInit+0x74>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <HAL_SPI_MspInit+0x74>)
 80009ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_SPI_MspInit+0x74>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_SPI_MspInit+0x74>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <HAL_SPI_MspInit+0x74>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_SPI_MspInit+0x74>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009f8:	23a0      	movs	r3, #160	; 0xa0
 80009fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_SPI_MspInit+0x78>)
 8000a0c:	f000 ff1e 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40013000 	.word	0x40013000
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010800 	.word	0x40010800

08000a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2019      	movs	r0, #25
 8000a3a:	f000 fedc 	bl	80017f6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a3e:	2019      	movs	r0, #25
 8000a40:	f000 fef5 	bl	800182e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_InitTick+0x9c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_InitTick+0x9c>)
 8000a4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_InitTick+0x9c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fc4c 	bl	8002304 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a6c:	f001 fc36 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8000a70:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	0c9b      	lsrs	r3, r3, #18
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <HAL_InitTick+0xa8>)
 8000a84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000aa2:	f002 f855 	bl	8002b50 <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d104      	bne.n	8000ab6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000aae:	f002 f8a7 	bl	8002c00 <HAL_TIM_Base_Start_IT>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3730      	adds	r7, #48	; 0x30
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	431bde83 	.word	0x431bde83
 8000ac8:	200011a0 	.word	0x200011a0
 8000acc:	40012c00 	.word	0x40012c00

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <BusFault_Handler+0x4>

08000aee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <UsageFault_Handler+0x4>

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM1_UP_IRQHandler+0x10>)
 8000b06:	f002 f8cd 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200011a0 	.word	0x200011a0

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f004 fd8a 	bl	800565c <__errno>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20005000 	.word	0x20005000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	200002e4 	.word	0x200002e4
 8000b7c:	200011f0 	.word	0x200011f0

08000b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <LCD_Init>:
uint8_t spiOK = 0U;

/**
 * Initialize LCD.
 */
void LCD_Init(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  LCD_Reset();
 8000b90:	f000 f810 	bl	8000bb4 <LCD_Reset>
  LCD_Write_Command(0x21);
 8000b94:	2021      	movs	r0, #33	; 0x21
 8000b96:	f000 f89f 	bl	8000cd8 <LCD_Write_Command>
  LCD_Write_Command(0xD0);
 8000b9a:	20d0      	movs	r0, #208	; 0xd0
 8000b9c:	f000 f89c 	bl	8000cd8 <LCD_Write_Command>
  LCD_Write_Command(0x20);
 8000ba0:	2020      	movs	r0, #32
 8000ba2:	f000 f899 	bl	8000cd8 <LCD_Write_Command>
  LCD_Write_Command(0x0C);
 8000ba6:	200c      	movs	r0, #12
 8000ba8:	f000 f896 	bl	8000cd8 <LCD_Write_Command>
  LCD_Clear();
 8000bac:	f000 f830 	bl	8000c10 <LCD_Clear>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <LCD_Reset>:

/**
 * Reset LCD.
 */
void LCD_Reset(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <LCD_Reset+0x24>)
 8000bbe:	f000 ff9f 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000bc2:	2032      	movs	r0, #50	; 0x32
 8000bc4:	f000 f930 	bl	8000e28 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <LCD_Reset+0x24>)
 8000bce:	f000 ff97 	bl	8001b00 <HAL_GPIO_WritePin>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40010800 	.word	0x40010800

08000bdc <LCD_Set_Postion>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void LCD_Set_Postion(uint8_t PosX, uint8_t PosY) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]
  LCD_Write_Command(0x40 | PosY);
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f86f 	bl	8000cd8 <LCD_Write_Command>
  LCD_Write_Command(0x80 | PosX);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f868 	bl	8000cd8 <LCD_Write_Command>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <LCD_Clear>:

/**
 * Clear all contents on LCD.
 */
void LCD_Clear(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD_Set_Postion(0,0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff ffdf 	bl	8000bdc <LCD_Set_Postion>
  for(t=0;t<6;t++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	e00e      	b.n	8000c42 <LCD_Clear+0x32>
  {
    for(k=0;k<84;k++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	71bb      	strb	r3, [r7, #6]
 8000c28:	e005      	b.n	8000c36 <LCD_Clear+0x26>
    {
      LCD_Write_Data(0x00);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f87c 	bl	8000d28 <LCD_Write_Data>
    for(k=0;k<84;k++)
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	3301      	adds	r3, #1
 8000c34:	71bb      	strb	r3, [r7, #6]
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	2b53      	cmp	r3, #83	; 0x53
 8000c3a:	d9f6      	bls.n	8000c2a <LCD_Clear+0x1a>
  for(t=0;t<6;t++)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d9ed      	bls.n	8000c24 <LCD_Clear+0x14>
    }
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <LCD_Write_Char>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void LCD_Write_Char(uint8_t ch) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	3b20      	subs	r3, #32
 8000c5e:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD_Write_Data(font6x8[ch][line]);
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e00f      	b.n	8000c86 <LCD_Write_Char+0x36>
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	7bf9      	ldrb	r1, [r7, #15]
 8000c6a:	480a      	ldr	r0, [pc, #40]	; (8000c94 <LCD_Write_Char+0x44>)
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4403      	add	r3, r0
 8000c76:	440b      	add	r3, r1
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f854 	bl	8000d28 <LCD_Write_Data>
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	3301      	adds	r3, #1
 8000c84:	73fb      	strb	r3, [r7, #15]
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	2b05      	cmp	r3, #5
 8000c8a:	d9ec      	bls.n	8000c66 <LCD_Write_Char+0x16>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	08006000 	.word	0x08006000

08000c98 <LCD_Write_String>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void LCD_Write_String(uint8_t PosX, uint8_t PosY, char * str) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	603a      	str	r2, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	71bb      	strb	r3, [r7, #6]
  LCD_Set_Postion(PosX, PosY);
 8000ca8:	79ba      	ldrb	r2, [r7, #6]
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff94 	bl	8000bdc <LCD_Set_Postion>
  while(* str) {
 8000cb4:	e007      	b.n	8000cc6 <LCD_Write_String+0x2e>
    LCD_Write_Char(* str);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ffc8 	bl	8000c50 <LCD_Write_Char>
    str ++;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	603b      	str	r3, [r7, #0]
  while(* str) {
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f3      	bne.n	8000cb6 <LCD_Write_String+0x1e>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <LCD_Write_Command>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void LCD_Write_Command(uint8_t cmd) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2108      	movs	r1, #8
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <LCD_Write_Command+0x48>)
 8000ce8:	f000 ff0a 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2110      	movs	r1, #16
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <LCD_Write_Command+0x48>)
 8000cf2:	f000 ff05 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &cmd, 0x01, 1000);
 8000cf6:	1df9      	adds	r1, r7, #7
 8000cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <LCD_Write_Command+0x4c>)
 8000d00:	f001 fd44 	bl	800278c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2108      	movs	r1, #8
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <LCD_Write_Command+0x48>)
 8000d0a:	f000 fef9 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2110      	movs	r1, #16
 8000d12:	4803      	ldr	r0, [pc, #12]	; (8000d20 <LCD_Write_Command+0x48>)
 8000d14:	f000 fef4 	bl	8001b00 <HAL_GPIO_WritePin>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40010800 	.word	0x40010800
 8000d24:	20001148 	.word	0x20001148

08000d28 <LCD_Write_Data>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void LCD_Write_Data(uint8_t data) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2108      	movs	r1, #8
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <LCD_Write_Data+0x48>)
 8000d38:	f000 fee2 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2110      	movs	r1, #16
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <LCD_Write_Data+0x48>)
 8000d42:	f000 fedd 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &data, 0x01, 1000);
 8000d46:	1df9      	adds	r1, r7, #7
 8000d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4809      	ldr	r0, [pc, #36]	; (8000d74 <LCD_Write_Data+0x4c>)
 8000d50:	f001 fd1c 	bl	800278c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2108      	movs	r1, #8
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <LCD_Write_Data+0x48>)
 8000d5a:	f000 fed1 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2110      	movs	r1, #16
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <LCD_Write_Data+0x48>)
 8000d64:	f000 fecc 	bl	8001b00 <HAL_GPIO_WritePin>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010800 	.word	0x40010800
 8000d74:	20001148 	.word	0x20001148

08000d78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d7a:	e003      	b.n	8000d84 <LoopCopyDataInit>

08000d7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d82:	3104      	adds	r1, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d8c:	d3f6      	bcc.n	8000d7c <CopyDataInit>
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d90:	e002      	b.n	8000d98 <LoopFillZerobss>

08000d92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d94:	f842 3b04 	str.w	r3, [r2], #4

08000d98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d9c:	d3f9      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d9e:	f7ff feef 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f004 fc61 	bl	8005668 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000da6:	f7ff f9fd 	bl	80001a4 <main>
  bx lr
 8000daa:	4770      	bx	lr
  ldr r3, =_sidata
 8000dac:	08006264 	.word	0x08006264
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000db4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000db8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000dbc:	200011f0 	.word	0x200011f0

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x28>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 fd03 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fe22 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fd4a 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x1c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x20>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_IncTick+0x20>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200011e8 	.word	0x200011e8

08000e14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <HAL_GetTick+0x10>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	200011e8 	.word	0x200011e8

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff fff0 	bl	8000e14 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_Delay+0x40>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffe0 	bl	8000e14 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000008 	.word	0x20000008

08000e6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e0be      	b.n	800100c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d109      	bne.n	8000eb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fd16 	bl	80008dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 fbb1 	bl	8001618 <ADC_ConversionStop_Disable>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 8099 	bne.w	8000ffa <HAL_ADC_Init+0x18e>
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f040 8095 	bne.w	8000ffa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ed8:	f023 0302 	bic.w	r3, r3, #2
 8000edc:	f043 0202 	orr.w	r2, r3, #2
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	7b1b      	ldrb	r3, [r3, #12]
 8000ef2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ef4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f04:	d003      	beq.n	8000f0e <HAL_ADC_Init+0xa2>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d102      	bne.n	8000f14 <HAL_ADC_Init+0xa8>
 8000f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f12:	e000      	b.n	8000f16 <HAL_ADC_Init+0xaa>
 8000f14:	2300      	movs	r3, #0
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7d1b      	ldrb	r3, [r3, #20]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d119      	bne.n	8000f58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7b1b      	ldrb	r3, [r3, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d109      	bne.n	8000f40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	035a      	lsls	r2, r3, #13
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	e00b      	b.n	8000f58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	f043 0220 	orr.w	r2, r3, #32
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	f043 0201 	orr.w	r2, r3, #1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <HAL_ADC_Init+0x1a8>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f88:	d003      	beq.n	8000f92 <HAL_ADC_Init+0x126>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d104      	bne.n	8000f9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	051b      	lsls	r3, r3, #20
 8000f9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_ADC_Init+0x1ac>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fd6:	e018      	b.n	800100a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	f023 0312 	bic.w	r3, r3, #18
 8000fe0:	f043 0210 	orr.w	r2, r3, #16
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	f043 0201 	orr.w	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff8:	e007      	b.n	800100a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	f043 0210 	orr.w	r2, r3, #16
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800100a:	7dfb      	ldrb	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	ffe1f7fd 	.word	0xffe1f7fd
 8001018:	ff1f0efe 	.word	0xff1f0efe

0800101c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Start+0x1a>
 8001032:	2302      	movs	r3, #2
 8001034:	e098      	b.n	8001168 <HAL_ADC_Start+0x14c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 fa98 	bl	8001574 <ADC_Enable>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f040 8087 	bne.w	800115e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a41      	ldr	r2, [pc, #260]	; (8001170 <HAL_ADC_Start+0x154>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d105      	bne.n	800107a <HAL_ADC_Start+0x5e>
 800106e:	4b41      	ldr	r3, [pc, #260]	; (8001174 <HAL_ADC_Start+0x158>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d115      	bne.n	80010a6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001090:	2b00      	cmp	r3, #0
 8001092:	d026      	beq.n	80010e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800109c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a4:	e01d      	b.n	80010e2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <HAL_ADC_Start+0x158>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d004      	beq.n	80010c6 <HAL_ADC_Start+0xaa>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a2b      	ldr	r2, [pc, #172]	; (8001170 <HAL_ADC_Start+0x154>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10d      	bne.n	80010e2 <HAL_ADC_Start+0xc6>
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_ADC_Start+0x158>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	f023 0206 	bic.w	r2, r3, #6
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010fa:	e002      	b.n	8001102 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f06f 0202 	mvn.w	r2, #2
 8001112:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800111e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001122:	d113      	bne.n	800114c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001128:	4a11      	ldr	r2, [pc, #68]	; (8001170 <HAL_ADC_Start+0x154>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d105      	bne.n	800113a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_ADC_Start+0x158>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001136:	2b00      	cmp	r3, #0
 8001138:	d108      	bne.n	800114c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	e00c      	b.n	8001166 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	e003      	b.n	8001166 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40012800 	.word	0x40012800
 8001174:	40012400 	.word	0x40012400

08001178 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800118e:	f7ff fe41 	bl	8000e14 <HAL_GetTick>
 8001192:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a6:	f043 0220 	orr.w	r2, r3, #32
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e0c8      	b.n	800134c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d12a      	bne.n	800121e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d123      	bne.n	800121e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011d6:	e01a      	b.n	800120e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011de:	d016      	beq.n	800120e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <HAL_ADC_PollForConversion+0x7e>
 80011e6:	f7ff fe15 	bl	8000e14 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d20b      	bcs.n	800120e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	f043 0204 	orr.w	r2, r3, #4
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e09e      	b.n	800134c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0dd      	beq.n	80011d8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800121c:	e06c      	b.n	80012f8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800121e:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <HAL_ADC_PollForConversion+0x1dc>)
 8001220:	681c      	ldr	r4, [r3, #0]
 8001222:	2002      	movs	r0, #2
 8001224:	f001 f972 	bl	800250c <HAL_RCCEx_GetPeriphCLKFreq>
 8001228:	4603      	mov	r3, r0
 800122a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6919      	ldr	r1, [r3, #16]
 8001234:	4b48      	ldr	r3, [pc, #288]	; (8001358 <HAL_ADC_PollForConversion+0x1e0>)
 8001236:	400b      	ands	r3, r1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d118      	bne.n	800126e <HAL_ADC_PollForConversion+0xf6>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68d9      	ldr	r1, [r3, #12]
 8001242:	4b46      	ldr	r3, [pc, #280]	; (800135c <HAL_ADC_PollForConversion+0x1e4>)
 8001244:	400b      	ands	r3, r1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d111      	bne.n	800126e <HAL_ADC_PollForConversion+0xf6>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6919      	ldr	r1, [r3, #16]
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <HAL_ADC_PollForConversion+0x1e8>)
 8001252:	400b      	ands	r3, r1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d108      	bne.n	800126a <HAL_ADC_PollForConversion+0xf2>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68d9      	ldr	r1, [r3, #12]
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <HAL_ADC_PollForConversion+0x1ec>)
 8001260:	400b      	ands	r3, r1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_ADC_PollForConversion+0xf2>
 8001266:	2314      	movs	r3, #20
 8001268:	e020      	b.n	80012ac <HAL_ADC_PollForConversion+0x134>
 800126a:	2329      	movs	r3, #41	; 0x29
 800126c:	e01e      	b.n	80012ac <HAL_ADC_PollForConversion+0x134>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6919      	ldr	r1, [r3, #16]
 8001274:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_ADC_PollForConversion+0x1e8>)
 8001276:	400b      	ands	r3, r1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d106      	bne.n	800128a <HAL_ADC_PollForConversion+0x112>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68d9      	ldr	r1, [r3, #12]
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <HAL_ADC_PollForConversion+0x1ec>)
 8001284:	400b      	ands	r3, r1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00d      	beq.n	80012a6 <HAL_ADC_PollForConversion+0x12e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6919      	ldr	r1, [r3, #16]
 8001290:	4b35      	ldr	r3, [pc, #212]	; (8001368 <HAL_ADC_PollForConversion+0x1f0>)
 8001292:	400b      	ands	r3, r1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d108      	bne.n	80012aa <HAL_ADC_PollForConversion+0x132>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68d9      	ldr	r1, [r3, #12]
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <HAL_ADC_PollForConversion+0x1f0>)
 80012a0:	400b      	ands	r3, r1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_ADC_PollForConversion+0x132>
 80012a6:	2354      	movs	r3, #84	; 0x54
 80012a8:	e000      	b.n	80012ac <HAL_ADC_PollForConversion+0x134>
 80012aa:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012b2:	e01d      	b.n	80012f0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ba:	d016      	beq.n	80012ea <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <HAL_ADC_PollForConversion+0x15a>
 80012c2:	f7ff fda7 	bl	8000e14 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d20b      	bcs.n	80012ea <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	f043 0204 	orr.w	r2, r3, #4
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e030      	b.n	800134c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8dd      	bhi.n	80012b4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f06f 0212 	mvn.w	r2, #18
 8001300:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001318:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800131c:	d115      	bne.n	800134a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001322:	2b00      	cmp	r3, #0
 8001324:	d111      	bne.n	800134a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	f043 0201 	orr.w	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	24924924 	.word	0x24924924
 800135c:	00924924 	.word	0x00924924
 8001360:	12492492 	.word	0x12492492
 8001364:	00492492 	.word	0x00492492
 8001368:	00249249 	.word	0x00249249

0800136c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x20>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0dc      	b.n	800155e <HAL_ADC_ConfigChannel+0x1da>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	d81c      	bhi.n	80013ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	3b05      	subs	r3, #5
 80013c6:	221f      	movs	r2, #31
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4019      	ands	r1, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
 80013ec:	e03c      	b.n	8001468 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d81c      	bhi.n	8001430 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	3b23      	subs	r3, #35	; 0x23
 8001408:	221f      	movs	r2, #31
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	4019      	ands	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b23      	subs	r3, #35	; 0x23
 8001422:	fa00 f203 	lsl.w	r2, r0, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
 800142e:	e01b      	b.n	8001468 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b41      	subs	r3, #65	; 0x41
 8001442:	221f      	movs	r2, #31
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	4019      	ands	r1, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b41      	subs	r3, #65	; 0x41
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b09      	cmp	r3, #9
 800146e:	d91c      	bls.n	80014aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68d9      	ldr	r1, [r3, #12]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	3b1e      	subs	r3, #30
 8001482:	2207      	movs	r2, #7
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	4019      	ands	r1, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6898      	ldr	r0, [r3, #8]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	3b1e      	subs	r3, #30
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	e019      	b.n	80014de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6919      	ldr	r1, [r3, #16]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	2207      	movs	r2, #7
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4019      	ands	r1, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	6898      	ldr	r0, [r3, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	fa00 f203 	lsl.w	r2, r0, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d003      	beq.n	80014ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ea:	2b11      	cmp	r3, #17
 80014ec:	d132      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_ADC_ConfigChannel+0x1e4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d125      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d126      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001514:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d11a      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_ADC_ConfigChannel+0x1e8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <HAL_ADC_ConfigChannel+0x1ec>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9a      	lsrs	r2, r3, #18
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001534:	e002      	b.n	800153c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x1b2>
 8001542:	e007      	b.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	f043 0220 	orr.w	r2, r3, #32
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40012400 	.word	0x40012400
 800156c:	20000000 	.word	0x20000000
 8001570:	431bde83 	.word	0x431bde83

08001574 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d039      	beq.n	8001606 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <ADC_Enable+0x9c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <ADC_Enable+0xa0>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	0c9b      	lsrs	r3, r3, #18
 80015ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b0:	e002      	b.n	80015b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015be:	f7ff fc29 	bl	8000e14 <HAL_GetTick>
 80015c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015c4:	e018      	b.n	80015f8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015c6:	f7ff fc25 	bl	8000e14 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d911      	bls.n	80015f8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f043 0210 	orr.w	r2, r3, #16
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	f043 0201 	orr.w	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e007      	b.n	8001608 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d1df      	bne.n	80015c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000000 	.word	0x20000000
 8001614:	431bde83 	.word	0x431bde83

08001618 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b01      	cmp	r3, #1
 8001630:	d127      	bne.n	8001682 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001642:	f7ff fbe7 	bl	8000e14 <HAL_GetTick>
 8001646:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001648:	e014      	b.n	8001674 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800164a:	f7ff fbe3 	bl	8000e14 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d90d      	bls.n	8001674 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	f043 0210 	orr.w	r2, r3, #16
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e007      	b.n	8001684 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b01      	cmp	r3, #1
 8001680:	d0e3      	beq.n	800164a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4906      	ldr	r1, [pc, #24]	; (8001724 <__NVIC_EnableIRQ+0x34>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff4f 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001808:	f7ff ff64 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 800180c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	f7ff ffb2 	bl	800177c <NVIC_EncodePriority>
 8001818:	4602      	mov	r2, r0
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff81 	bl	8001728 <__NVIC_SetPriority>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff57 	bl	80016f0 <__NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e127      	b.n	8001ab0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8116 	bne.w	8001aaa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b12      	cmp	r3, #18
 8001884:	d034      	beq.n	80018f0 <HAL_GPIO_Init+0xa4>
 8001886:	2b12      	cmp	r3, #18
 8001888:	d80d      	bhi.n	80018a6 <HAL_GPIO_Init+0x5a>
 800188a:	2b02      	cmp	r3, #2
 800188c:	d02b      	beq.n	80018e6 <HAL_GPIO_Init+0x9a>
 800188e:	2b02      	cmp	r3, #2
 8001890:	d804      	bhi.n	800189c <HAL_GPIO_Init+0x50>
 8001892:	2b00      	cmp	r3, #0
 8001894:	d031      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 8001896:	2b01      	cmp	r3, #1
 8001898:	d01c      	beq.n	80018d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800189a:	e048      	b.n	800192e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800189c:	2b03      	cmp	r3, #3
 800189e:	d043      	beq.n	8001928 <HAL_GPIO_Init+0xdc>
 80018a0:	2b11      	cmp	r3, #17
 80018a2:	d01b      	beq.n	80018dc <HAL_GPIO_Init+0x90>
          break;
 80018a4:	e043      	b.n	800192e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018a6:	4a89      	ldr	r2, [pc, #548]	; (8001acc <HAL_GPIO_Init+0x280>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d026      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018ac:	4a87      	ldr	r2, [pc, #540]	; (8001acc <HAL_GPIO_Init+0x280>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d806      	bhi.n	80018c0 <HAL_GPIO_Init+0x74>
 80018b2:	4a87      	ldr	r2, [pc, #540]	; (8001ad0 <HAL_GPIO_Init+0x284>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d020      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018b8:	4a86      	ldr	r2, [pc, #536]	; (8001ad4 <HAL_GPIO_Init+0x288>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01d      	beq.n	80018fa <HAL_GPIO_Init+0xae>
          break;
 80018be:	e036      	b.n	800192e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018c0:	4a85      	ldr	r2, [pc, #532]	; (8001ad8 <HAL_GPIO_Init+0x28c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018c6:	4a85      	ldr	r2, [pc, #532]	; (8001adc <HAL_GPIO_Init+0x290>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d016      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018cc:	4a84      	ldr	r2, [pc, #528]	; (8001ae0 <HAL_GPIO_Init+0x294>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0xae>
          break;
 80018d2:	e02c      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e028      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	3304      	adds	r3, #4
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e023      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	3308      	adds	r3, #8
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e01e      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	330c      	adds	r3, #12
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e019      	b.n	800192e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001902:	2304      	movs	r3, #4
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e012      	b.n	800192e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	611a      	str	r2, [r3, #16]
          break;
 800191a:	e008      	b.n	800192e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	615a      	str	r2, [r3, #20]
          break;
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2bff      	cmp	r3, #255	; 0xff
 8001932:	d801      	bhi.n	8001938 <HAL_GPIO_Init+0xec>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	e001      	b.n	800193c <HAL_GPIO_Init+0xf0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3304      	adds	r3, #4
 800193c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	d802      	bhi.n	800194a <HAL_GPIO_Init+0xfe>
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x104>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3b08      	subs	r3, #8
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	210f      	movs	r1, #15
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	401a      	ands	r2, r3
 8001962:	6a39      	ldr	r1, [r7, #32]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	431a      	orrs	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8096 	beq.w	8001aaa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800197e:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6193      	str	r3, [r2, #24]
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001996:	4a54      	ldr	r2, [pc, #336]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4b      	ldr	r2, [pc, #300]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x19e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4a      	ldr	r2, [pc, #296]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x19a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a49      	ldr	r2, [pc, #292]	; (8001af4 <HAL_GPIO_Init+0x2a8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x196>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x192>
 80019da:	2303      	movs	r3, #3
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019de:	2304      	movs	r3, #4
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019ea:	2300      	movs	r3, #0
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fc:	493a      	ldr	r1, [pc, #232]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4938      	ldr	r1, [pc, #224]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
 8001a22:	e006      	b.n	8001a32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a24:	4b35      	ldr	r3, [pc, #212]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4933      	ldr	r1, [pc, #204]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	492e      	ldr	r1, [pc, #184]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
 8001a4a:	e006      	b.n	8001a5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	4929      	ldr	r1, [pc, #164]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	4924      	ldr	r1, [pc, #144]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	491f      	ldr	r1, [pc, #124]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	491a      	ldr	r1, [pc, #104]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60cb      	str	r3, [r1, #12]
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4915      	ldr	r1, [pc, #84]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f47f aed0 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	372c      	adds	r7, #44	; 0x2c
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	10210000 	.word	0x10210000
 8001ad0:	10110000 	.word	0x10110000
 8001ad4:	10120000 	.word	0x10120000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10220000 	.word	0x10220000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40010800 	.word	0x40010800
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40011000 	.word	0x40011000
 8001af8:	40011400 	.word	0x40011400
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	611a      	str	r2, [r3, #16]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e26c      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8087 	beq.w	8001c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b50:	4b92      	ldr	r3, [pc, #584]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d00c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b5c:	4b8f      	ldr	r3, [pc, #572]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d112      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5e>
 8001b68:	4b8c      	ldr	r3, [pc, #560]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d10b      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b76:	4b89      	ldr	r3, [pc, #548]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d06c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x12c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d168      	bne.n	8001c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e246      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x76>
 8001b98:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a7f      	ldr	r2, [pc, #508]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e02e      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x98>
 8001bae:	4b7b      	ldr	r3, [pc, #492]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a7a      	ldr	r2, [pc, #488]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b78      	ldr	r3, [pc, #480]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0xbc>
 8001bd2:	4b72      	ldr	r3, [pc, #456]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a71      	ldr	r2, [pc, #452]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bec:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6a      	ldr	r2, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a67      	ldr	r2, [pc, #412]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f902 	bl	8000e14 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff f8fe 	bl	8000e14 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1fa      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0xe4>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff f8ee 	bl	8000e14 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f8ea 	bl	8000e14 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1e6      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x10c>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d063      	beq.n	8001d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c76:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d11c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x18c>
 8001c82:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d116      	bne.n	8001cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x176>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e1ba      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4939      	ldr	r1, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	e03a      	b.n	8001d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff f8a3 	bl	8000e14 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f89f 	bl	8000e14 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e19b      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4927      	ldr	r1, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f882 	bl	8000e14 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff f87e 	bl	8000e14 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e17a      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03a      	beq.n	8001db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d019      	beq.n	8001d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_RCC_OscConfig+0x274>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff f862 	bl	8000e14 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff f85e 	bl	8000e14 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e15a      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f000 faf6 	bl	8002364 <RCC_Delay>
 8001d78:	e01c      	b.n	8001db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff f848 	bl	8000e14 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d86:	e00f      	b.n	8001da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff f844 	bl	8000e14 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d908      	bls.n	8001da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e140      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	42420000 	.word	0x42420000
 8001da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4b9e      	ldr	r3, [pc, #632]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e9      	bne.n	8001d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a6 	beq.w	8001f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b97      	ldr	r3, [pc, #604]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10d      	bne.n	8001dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b94      	ldr	r3, [pc, #592]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a93      	ldr	r2, [pc, #588]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]
 8001dde:	4b91      	ldr	r3, [pc, #580]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a8a      	ldr	r2, [pc, #552]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7ff f805 	bl	8000e14 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7ff f801 	bl	8000e14 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b64      	cmp	r3, #100	; 0x64
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0fd      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b81      	ldr	r3, [pc, #516]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x312>
 8001e34:	4b7b      	ldr	r3, [pc, #492]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a7a      	ldr	r2, [pc, #488]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	e02d      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x334>
 8001e4a:	4b76      	ldr	r3, [pc, #472]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	4b73      	ldr	r3, [pc, #460]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a72      	ldr	r2, [pc, #456]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	e01c      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x356>
 8001e6c:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a6c      	ldr	r2, [pc, #432]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a69      	ldr	r2, [pc, #420]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e00b      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a66      	ldr	r2, [pc, #408]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a63      	ldr	r2, [pc, #396]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d015      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7fe ffb5 	bl	8000e14 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7fe ffb1 	bl	8000e14 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0ab      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ee      	beq.n	8001eae <HAL_RCC_OscConfig+0x37e>
 8001ed0:	e014      	b.n	8001efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe ff9f 	bl	8000e14 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7fe ff9b 	bl	8000e14 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e095      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef0:	4b4c      	ldr	r3, [pc, #304]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ee      	bne.n	8001eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f02:	4b48      	ldr	r3, [pc, #288]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a47      	ldr	r2, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8081 	beq.w	800201a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d061      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d146      	bne.n	8001fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7fe ff6f 	bl	8000e14 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7fe ff6b 	bl	8000e14 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e067      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d108      	bne.n	8001f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	492d      	ldr	r1, [pc, #180]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a19      	ldr	r1, [r3, #32]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4927      	ldr	r1, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe ff3f 	bl	8000e14 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7fe ff3b 	bl	8000e14 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e037      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x46a>
 8001fb8:	e02f      	b.n	800201a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff28 	bl	8000e14 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe ff24 	bl	8000e14 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e020      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x498>
 8001fe6:	e018      	b.n	800201a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e013      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	40007000 	.word	0x40007000
 800202c:	42420060 	.word	0x42420060

08002030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d0      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d910      	bls.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4965      	ldr	r1, [pc, #404]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	494d      	ldr	r1, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d040      	beq.n	8002150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d115      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e073      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4936      	ldr	r1, [pc, #216]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002120:	f7fe fe78 	bl	8000e14 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7fe fe74 	bl	8000e14 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e053      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d210      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4922      	ldr	r1, [pc, #136]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e032      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4916      	ldr	r1, [pc, #88]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021be:	f000 f821 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c2:	4601      	mov	r1, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	fa21 f303 	lsr.w	r3, r1, r3
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1cc>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1d0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fc20 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08005fe8 	.word	0x08005fe8
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b490      	push	{r4, r7}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800220c:	1d3c      	adds	r4, r7, #4
 800220e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x40>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x46>
 8002242:	e02d      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002246:	623b      	str	r3, [r7, #32]
      break;
 8002248:	e02d      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002256:	4413      	add	r3, r2
 8002258:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800225c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0c5b      	lsrs	r3, r3, #17
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002276:	4413      	add	r3, r2
 8002278:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800227c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002282:	fb02 f203 	mul.w	r2, r2, r3
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	e004      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	623b      	str	r3, [r7, #32]
      break;
 800229e:	e002      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a2:	623b      	str	r3, [r7, #32]
      break;
 80022a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc90      	pop	{r4, r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	08005fb8 	.word	0x08005fb8
 80022b8:	08005fc8 	.word	0x08005fc8
 80022bc:	40021000 	.word	0x40021000
 80022c0:	007a1200 	.word	0x007a1200
 80022c4:	003d0900 	.word	0x003d0900

080022c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022cc:	4b02      	ldr	r3, [pc, #8]	; (80022d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022e0:	f7ff fff2 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 80022e4:	4601      	mov	r1, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0adb      	lsrs	r3, r3, #11
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	08005ff8 	.word	0x08005ff8

08002304 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	220f      	movs	r2, #15
 8002312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_RCC_GetClockConfig+0x58>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_RCC_GetClockConfig+0x58>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_GetClockConfig+0x58>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_RCC_GetClockConfig+0x58>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_RCC_GetClockConfig+0x5c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0207 	and.w	r2, r3, #7
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40021000 	.word	0x40021000
 8002360:	40022000 	.word	0x40022000

08002364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <RCC_Delay+0x34>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <RCC_Delay+0x38>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0a5b      	lsrs	r3, r3, #9
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002380:	bf00      	nop
  }
  while (Delay --);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	60fa      	str	r2, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f9      	bne.n	8002380 <RCC_Delay+0x1c>
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000000 	.word	0x20000000
 800239c:	10624dd3 	.word	0x10624dd3

080023a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d07d      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c0:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d6:	61d3      	str	r3, [r2, #28]
 80023d8:	4b49      	ldr	r3, [pc, #292]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e4:	2301      	movs	r3, #1
 80023e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b46      	ldr	r3, [pc, #280]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d118      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002400:	f7fe fd08 	bl	8000e14 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	e008      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002408:	f7fe fd04 	bl	8000e14 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e06d      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d02e      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	429a      	cmp	r2, r3
 8002442:	d027      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002444:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800244e:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002454:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800245a:	4a29      	ldr	r2, [pc, #164]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d014      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fcd3 	bl	8000e14 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fccf 	bl	8000e14 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e036      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ee      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4917      	ldr	r1, [pc, #92]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	4a13      	ldr	r2, [pc, #76]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	490b      	ldr	r1, [pc, #44]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	4904      	ldr	r1, [pc, #16]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	42420440 	.word	0x42420440

0800250c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b08d      	sub	sp, #52	; 0x34
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002514:	4b55      	ldr	r3, [pc, #340]	; (800266c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002516:	f107 040c 	add.w	r4, r7, #12
 800251a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800251c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002520:	4b53      	ldr	r3, [pc, #332]	; (8002670 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	2300      	movs	r3, #0
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	2300      	movs	r3, #0
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d07f      	beq.n	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002540:	2b10      	cmp	r3, #16
 8002542:	d002      	beq.n	800254a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002544:	2b01      	cmp	r3, #1
 8002546:	d048      	beq.n	80025da <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002548:	e08b      	b.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002550:	4b48      	ldr	r3, [pc, #288]	; (8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d07f      	beq.n	800265c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	0c9b      	lsrs	r3, r3, #18
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002568:	4413      	add	r3, r2
 800256a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800256e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d018      	beq.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0c5b      	lsrs	r3, r3, #17
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002588:	4413      	add	r3, r2
 800258a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00d      	beq.n	80025b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800259a:	4a37      	ldr	r2, [pc, #220]	; (8002678 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025aa:	e004      	b.n	80025b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	4a33      	ldr	r2, [pc, #204]	; (800267c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025b0:	fb02 f303 	mul.w	r3, r2, r3
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c2:	d102      	bne.n	80025ca <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025c8:	e048      	b.n	800265c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4a2c      	ldr	r2, [pc, #176]	; (8002680 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025d8:	e040      	b.n	800265c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ea:	d108      	bne.n	80025fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80025f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fc:	e01f      	b.n	800263e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002608:	d109      	bne.n	800261e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002616:	f649 4340 	movw	r3, #40000	; 0x9c40
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
 800261c:	e00f      	b.n	800263e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002628:	d11a      	bne.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d014      	beq.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002636:	f24f 4324 	movw	r3, #62500	; 0xf424
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800263c:	e010      	b.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800263e:	e00f      	b.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002640:	f7ff fe4c 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	0b9b      	lsrs	r3, r3, #14
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	3301      	adds	r3, #1
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800265a:	e002      	b.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800265c:	bf00      	nop
 800265e:	e000      	b.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002660:	bf00      	nop
    }
  }
  return (frequency);
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002664:	4618      	mov	r0, r3
 8002666:	3734      	adds	r7, #52	; 0x34
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}
 800266c:	08005fcc 	.word	0x08005fcc
 8002670:	08005fdc 	.word	0x08005fdc
 8002674:	40021000 	.word	0x40021000
 8002678:	007a1200 	.word	0x007a1200
 800267c:	003d0900 	.word	0x003d0900
 8002680:	aaaaaaab 	.word	0xaaaaaaab

08002684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e076      	b.n	8002784 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a6:	d009      	beq.n	80026bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
 80026ae:	e005      	b.n	80026bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe f966 	bl	80009a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002740:	ea42 0103 	orr.w	r1, r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	0c1a      	lsrs	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f002 0204 	and.w	r2, r2, #4
 8002762:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002772:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_SPI_Transmit+0x22>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e126      	b.n	80029fc <HAL_SPI_Transmit+0x270>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027b6:	f7fe fb2d 	bl	8000e14 <HAL_GetTick>
 80027ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d002      	beq.n	80027d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
 80027ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027d0:	e10b      	b.n	80029ea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_SPI_Transmit+0x52>
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027e2:	e102      	b.n	80029ea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2203      	movs	r2, #3
 80027e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800282a:	d10f      	bne.n	800284c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d007      	beq.n	800286a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002872:	d14b      	bne.n	800290c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_SPI_Transmit+0xf6>
 800287c:	8afb      	ldrh	r3, [r7, #22]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d13e      	bne.n	8002900 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	1c9a      	adds	r2, r3, #2
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028a6:	e02b      	b.n	8002900 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d112      	bne.n	80028dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	1c9a      	adds	r2, r3, #2
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80028da:	e011      	b.n	8002900 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028dc:	f7fe fa9a 	bl	8000e14 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d803      	bhi.n	80028f4 <HAL_SPI_Transmit+0x168>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f2:	d102      	bne.n	80028fa <HAL_SPI_Transmit+0x16e>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028fe:	e074      	b.n	80029ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ce      	bne.n	80028a8 <HAL_SPI_Transmit+0x11c>
 800290a:	e04c      	b.n	80029a6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <HAL_SPI_Transmit+0x18e>
 8002914:	8afb      	ldrh	r3, [r7, #22]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d140      	bne.n	800299c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002940:	e02c      	b.n	800299c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b02      	cmp	r3, #2
 800294e:	d113      	bne.n	8002978 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	7812      	ldrb	r2, [r2, #0]
 800295c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	86da      	strh	r2, [r3, #54]	; 0x36
 8002976:	e011      	b.n	800299c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002978:	f7fe fa4c 	bl	8000e14 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d803      	bhi.n	8002990 <HAL_SPI_Transmit+0x204>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Transmit+0x20a>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	77fb      	strb	r3, [r7, #31]
          goto error;
 800299a:	e026      	b.n	80029ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1cd      	bne.n	8002942 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	6839      	ldr	r1, [r7, #0]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f8b2 	bl	8002b14 <SPI_EndRxTxTransaction>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	77fb      	strb	r3, [r7, #31]
 80029e6:	e000      	b.n	80029ea <HAL_SPI_Transmit+0x25e>
  }

error:
 80029e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3720      	adds	r7, #32
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a14:	f7fe f9fe 	bl	8000e14 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a24:	f7fe f9f6 	bl	8000e14 <HAL_GetTick>
 8002a28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	015b      	lsls	r3, r3, #5
 8002a30:	0d1b      	lsrs	r3, r3, #20
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a3a:	e054      	b.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a42:	d050      	beq.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a44:	f7fe f9e6 	bl	8000e14 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d902      	bls.n	8002a5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d13d      	bne.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a72:	d111      	bne.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a7c:	d004      	beq.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a86:	d107      	bne.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa0:	d10f      	bne.n	8002ac2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ac0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e017      	b.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d19b      	bne.n	8002a3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000000 	.word	0x20000000

08002b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f7ff ff6a 	bl	8002a04 <SPI_WaitFlagStateUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	f043 0220 	orr.w	r2, r3, #32
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e000      	b.n	8002b48 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e041      	b.n	8002be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f839 	bl	8002bee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f000 f9b4 	bl	8002efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d001      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e03a      	b.n	8002c8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_TIM_Base_Start_IT+0x98>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00e      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x58>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d009      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x58>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_TIM_Base_Start_IT+0x9c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x58>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d111      	bne.n	8002c7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d010      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7a:	e007      	b.n	8002c8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0202 	mvn.w	r2, #2
 8002cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8ed 	bl	8002ec6 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8e0 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f8ef 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0204 	mvn.w	r2, #4
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8c3 	bl	8002ec6 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8b6 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f8c5 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d122      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d11b      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0208 	mvn.w	r2, #8
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f899 	bl	8002ec6 <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f88c 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f89b 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d122      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d11b      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0210 	mvn.w	r2, #16
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f86f 	bl	8002ec6 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f862 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f871 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0201 	mvn.w	r2, #1
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd fd10 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d107      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8bf 	bl	8002fd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d107      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f835 	bl	8002eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0220 	mvn.w	r2, #32
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f88a 	bl	8002fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <TIM_Base_SetConfig+0xb8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <TIM_Base_SetConfig+0x30>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1a:	d007      	beq.n	8002f2c <TIM_Base_SetConfig+0x30>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <TIM_Base_SetConfig+0xbc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0x30>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a25      	ldr	r2, [pc, #148]	; (8002fbc <TIM_Base_SetConfig+0xc0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d108      	bne.n	8002f3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <TIM_Base_SetConfig+0xb8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_Base_SetConfig+0x62>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0x62>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <TIM_Base_SetConfig+0xbc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0x62>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <TIM_Base_SetConfig+0xc0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <TIM_Base_SetConfig+0xb8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d103      	bne.n	8002fa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	40012c00 	.word	0x40012c00
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40000800 	.word	0x40000800

08002fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff6:	2b84      	cmp	r3, #132	; 0x84
 8002ff8:	d005      	beq.n	8003006 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ffa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	3303      	adds	r3, #3
 8003004:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003018:	f3ef 8305 	mrs	r3, IPSR
 800301c:	607b      	str	r3, [r7, #4]
  return(result);
 800301e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003038:	f001 f91e 	bl	8004278 <vTaskStartScheduler>
  
  return osOK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}

08003042 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003044:	b089      	sub	sp, #36	; 0x24
 8003046:	af04      	add	r7, sp, #16
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <osThreadCreate+0x54>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01c      	beq.n	8003096 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685c      	ldr	r4, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681d      	ldr	r5, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691e      	ldr	r6, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ffb8 	bl	8002fe4 <makeFreeRtosPriority>
 8003074:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800307e:	9202      	str	r2, [sp, #8]
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	9100      	str	r1, [sp, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4632      	mov	r2, r6
 8003088:	4629      	mov	r1, r5
 800308a:	4620      	mov	r0, r4
 800308c:	f000 ff3a 	bl	8003f04 <xTaskCreateStatic>
 8003090:	4603      	mov	r3, r0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e01c      	b.n	80030d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685c      	ldr	r4, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030a2:	b29e      	uxth	r6, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff9a 	bl	8002fe4 <makeFreeRtosPriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	9200      	str	r2, [sp, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	4632      	mov	r2, r6
 80030be:	4629      	mov	r1, r5
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 ff78 	bl	8003fb6 <xTaskCreate>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d001      	beq.n	80030d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030d0:	68fb      	ldr	r3, [r7, #12]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <osDelay+0x16>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	e000      	b.n	80030f2 <osDelay+0x18>
 80030f0:	2301      	movs	r3, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 f88c 	bl	8004210 <vTaskDelay>
  
  return osOK;
 80030f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4619      	mov	r1, r3
 8003118:	2001      	movs	r0, #1
 800311a:	f000 faa7 	bl	800366c <xQueueCreateMutexStatic>
 800311e:	4603      	mov	r3, r0
 8003120:	e003      	b.n	800312a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003122:	2001      	movs	r0, #1
 8003124:	f000 fa8a 	bl	800363c <xQueueCreateMutex>
 8003128:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <osMutexWait+0x18>
    return osErrorParameter;
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	e03a      	b.n	80031c2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003156:	d103      	bne.n	8003160 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e009      	b.n	8003174 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d006      	beq.n	8003174 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <osMutexWait+0x40>
      ticks = 1;
 8003170:	2301      	movs	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003174:	f7ff ff4d 	bl	8003012 <inHandlerMode>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d017      	beq.n	80031ae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	461a      	mov	r2, r3
 8003184:	2100      	movs	r1, #0
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fd18 	bl	8003bbc <xQueueReceiveFromISR>
 800318c:	4603      	mov	r3, r0
 800318e:	2b01      	cmp	r3, #1
 8003190:	d001      	beq.n	8003196 <osMutexWait+0x62>
      return osErrorOS;
 8003192:	23ff      	movs	r3, #255	; 0xff
 8003194:	e015      	b.n	80031c2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d011      	beq.n	80031c0 <osMutexWait+0x8c>
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <osMutexWait+0x98>)
 800319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	e008      	b.n	80031c0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fbfb 	bl	80039ac <xQueueSemaphoreTake>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d001      	beq.n	80031c0 <osMutexWait+0x8c>
    return osErrorOS;
 80031bc:	23ff      	movs	r3, #255	; 0xff
 80031be:	e000      	b.n	80031c2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	e000ed04 	.word	0xe000ed04

080031d0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80031e0:	f7ff ff17 	bl	8003012 <inHandlerMode>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fb51 	bl	8003898 <xQueueGiveFromISR>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <osMutexRelease+0x30>
      return osErrorOS;
 80031fc:	23ff      	movs	r3, #255	; 0xff
 80031fe:	e017      	b.n	8003230 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d013      	beq.n	800322e <osMutexRelease+0x5e>
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <osMutexRelease+0x68>)
 8003208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	e00a      	b.n	800322e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003218:	2300      	movs	r3, #0
 800321a:	2200      	movs	r2, #0
 800321c:	2100      	movs	r1, #0
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa40 	bl	80036a4 <xQueueGenericSend>
 8003224:	4603      	mov	r3, r0
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800322a:	23ff      	movs	r3, #255	; 0xff
 800322c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f103 0208 	add.w	r2, r3, #8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f103 0208 	add.w	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f103 0208 	add.w	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ee:	d103      	bne.n	80032f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	e00c      	b.n	8003312 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3308      	adds	r3, #8
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	e002      	b.n	8003306 <vListInsert+0x2e>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	d2f6      	bcs.n	8003300 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6892      	ldr	r2, [r2, #8]
 800335e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6852      	ldr	r2, [r2, #4]
 8003368:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d103      	bne.n	800337c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	1e5a      	subs	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
	...

0800339c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	e7fe      	b.n	80033c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80033c4:	f001 fe80 	bl	80050c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	441a      	add	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	3b01      	subs	r3, #1
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	441a      	add	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	22ff      	movs	r2, #255	; 0xff
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	22ff      	movs	r2, #255	; 0xff
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d114      	bne.n	8003444 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01a      	beq.n	8003458 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3310      	adds	r3, #16
 8003426:	4618      	mov	r0, r3
 8003428:	f001 f968 	bl	80046fc <xTaskRemoveFromEventList>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d012      	beq.n	8003458 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <xQueueGenericReset+0xcc>)
 8003434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	e009      	b.n	8003458 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3310      	adds	r3, #16
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fef7 	bl	800323c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3324      	adds	r3, #36	; 0x24
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fef2 	bl	800323c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003458:	f001 fe64 	bl	8005124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800345c:	2301      	movs	r3, #1
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	; 0x38
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <xQueueGenericCreateStatic+0x28>
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
 8003492:	e7fe      	b.n	8003492 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <xQueueGenericCreateStatic+0x42>
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	e7fe      	b.n	80034ac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <xQueueGenericCreateStatic+0x4e>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <xQueueGenericCreateStatic+0x52>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <xQueueGenericCreateStatic+0x54>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <xQueueGenericCreateStatic+0x6c>
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	e7fe      	b.n	80034d6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <xQueueGenericCreateStatic+0x78>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <xQueueGenericCreateStatic+0x7c>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <xQueueGenericCreateStatic+0x7e>
 80034e8:	2300      	movs	r3, #0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <xQueueGenericCreateStatic+0x96>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	e7fe      	b.n	8003500 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003502:	2348      	movs	r3, #72	; 0x48
 8003504:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b48      	cmp	r3, #72	; 0x48
 800350a:	d009      	beq.n	8003520 <xQueueGenericCreateStatic+0xb4>
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e7fe      	b.n	800351e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003532:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f842 	bl	80035ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003548:	4618      	mov	r0, r3
 800354a:	3730      	adds	r7, #48	; 0x30
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <xQueueGenericCreate+0x28>
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	e7fe      	b.n	8003576 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e004      	b.n	800358e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3348      	adds	r3, #72	; 0x48
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fe8e 	bl	80052b4 <pvPortMalloc>
 8003598:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00f      	beq.n	80035c0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	3348      	adds	r3, #72	; 0x48
 80035a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035ae:	79fa      	ldrb	r2, [r7, #7]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f805 	bl	80035ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80035c0:	69bb      	ldr	r3, [r7, #24]
	}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e002      	b.n	80035ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035f8:	2101      	movs	r1, #1
 80035fa:	69b8      	ldr	r0, [r7, #24]
 80035fc:	f7ff fece 	bl	800339c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003628:	2300      	movs	r3, #0
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f838 	bl	80036a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003646:	2301      	movs	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	461a      	mov	r2, r3
 8003652:	6939      	ldr	r1, [r7, #16]
 8003654:	6978      	ldr	r0, [r7, #20]
 8003656:	f7ff ff7b 	bl	8003550 <xQueueGenericCreate>
 800365a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ffd3 	bl	8003608 <prvInitialiseMutex>

		return pxNewQueue;
 8003662:	68fb      	ldr	r3, [r7, #12]
	}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003678:	2301      	movs	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	6939      	ldr	r1, [r7, #16]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff feee 	bl	800346c <xQueueGenericCreateStatic>
 8003690:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff ffb8 	bl	8003608 <prvInitialiseMutex>

		return pxNewQueue;
 8003698:	68fb      	ldr	r3, [r7, #12]
	}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08e      	sub	sp, #56	; 0x38
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036b2:	2300      	movs	r3, #0
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <xQueueGenericSend+0x30>
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d2:	e7fe      	b.n	80036d2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <xQueueGenericSend+0x3e>
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <xQueueGenericSend+0x42>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <xQueueGenericSend+0x44>
 80036e6:	2300      	movs	r3, #0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <xQueueGenericSend+0x5c>
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e7fe      	b.n	80036fe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d103      	bne.n	800370e <xQueueGenericSend+0x6a>
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <xQueueGenericSend+0x6e>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <xQueueGenericSend+0x70>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <xQueueGenericSend+0x88>
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	e7fe      	b.n	800372a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800372c:	f001 f9a0 	bl	8004a70 <xTaskGetSchedulerState>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <xQueueGenericSend+0x98>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <xQueueGenericSend+0x9c>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <xQueueGenericSend+0x9e>
 8003740:	2300      	movs	r3, #0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <xQueueGenericSend+0xb6>
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e7fe      	b.n	8003758 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800375a:	f001 fcb5 	bl	80050c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <xQueueGenericSend+0xcc>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d129      	bne.n	80037c4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003776:	f000 fab5 	bl	8003ce4 <prvCopyDataToQueue>
 800377a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	3324      	adds	r3, #36	; 0x24
 8003788:	4618      	mov	r0, r3
 800378a:	f000 ffb7 	bl	80046fc <xTaskRemoveFromEventList>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003794:	4b3f      	ldr	r3, [pc, #252]	; (8003894 <xQueueGenericSend+0x1f0>)
 8003796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	e00a      	b.n	80037bc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <xQueueGenericSend+0x1f0>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037bc:	f001 fcb2 	bl	8005124 <vPortExitCritical>
				return pdPASS;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e063      	b.n	800388c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037ca:	f001 fcab 	bl	8005124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e05c      	b.n	800388c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037d8:	f107 0314 	add.w	r3, r7, #20
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 ffef 	bl	80047c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037e2:	2301      	movs	r3, #1
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037e6:	f001 fc9d 	bl	8005124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037ea:	f000 fda3 	bl	8004334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037ee:	f001 fc6b 	bl	80050c8 <vPortEnterCritical>
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037f8:	b25b      	sxtb	r3, r3
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037fe:	d103      	bne.n	8003808 <xQueueGenericSend+0x164>
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800380e:	b25b      	sxtb	r3, r3
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003814:	d103      	bne.n	800381e <xQueueGenericSend+0x17a>
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800381e:	f001 fc81 	bl	8005124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003822:	1d3a      	adds	r2, r7, #4
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f000 ffde 	bl	80047ec <xTaskCheckForTimeOut>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d124      	bne.n	8003880 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003838:	f000 fb4c 	bl	8003ed4 <prvIsQueueFull>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d018      	beq.n	8003874 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	3310      	adds	r3, #16
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f000 ff32 	bl	80046b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003852:	f000 fad7 	bl	8003e04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003856:	f000 fd7b 	bl	8004350 <xTaskResumeAll>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f af7c 	bne.w	800375a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <xQueueGenericSend+0x1f0>)
 8003864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	e772      	b.n	800375a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003876:	f000 fac5 	bl	8003e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800387a:	f000 fd69 	bl	8004350 <xTaskResumeAll>
 800387e:	e76c      	b.n	800375a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003882:	f000 fabf 	bl	8003e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003886:	f000 fd63 	bl	8004350 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800388a:	2300      	movs	r3, #0
		}
	}
}
 800388c:	4618      	mov	r0, r3
 800388e:	3738      	adds	r7, #56	; 0x38
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08e      	sub	sp, #56	; 0x38
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <xQueueGiveFromISR+0x28>
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	623b      	str	r3, [r7, #32]
 80038be:	e7fe      	b.n	80038be <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <xQueueGiveFromISR+0x44>
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	e7fe      	b.n	80038da <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <xQueueGiveFromISR+0x54>
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <xQueueGiveFromISR+0x58>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <xQueueGiveFromISR+0x5a>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <xQueueGiveFromISR+0x72>
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	e7fe      	b.n	8003908 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800390a:	f001 fc97 	bl	800523c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800390e:	f3ef 8211 	mrs	r2, BASEPRI
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	617a      	str	r2, [r7, #20]
 8003924:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003926:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003936:	429a      	cmp	r2, r3
 8003938:	d22b      	bcs.n	8003992 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800394c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003954:	d112      	bne.n	800397c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	3324      	adds	r3, #36	; 0x24
 8003962:	4618      	mov	r0, r3
 8003964:	f000 feca 	bl	80046fc <xTaskRemoveFromEventList>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e007      	b.n	800398c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800397c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003980:	3301      	adds	r3, #1
 8003982:	b2db      	uxtb	r3, r3
 8003984:	b25a      	sxtb	r2, r3
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800398c:	2301      	movs	r3, #1
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
 8003990:	e001      	b.n	8003996 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003992:	2300      	movs	r3, #0
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3738      	adds	r7, #56	; 0x38
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08e      	sub	sp, #56	; 0x38
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80039be:	2300      	movs	r3, #0
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <xQueueSemaphoreTake+0x30>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	623b      	str	r3, [r7, #32]
 80039da:	e7fe      	b.n	80039da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <xQueueSemaphoreTake+0x4c>
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e7fe      	b.n	80039f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039f8:	f001 f83a 	bl	8004a70 <xTaskGetSchedulerState>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <xQueueSemaphoreTake+0x5c>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <xQueueSemaphoreTake+0x60>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <xQueueSemaphoreTake+0x62>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <xQueueSemaphoreTake+0x7a>
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	e7fe      	b.n	8003a24 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a26:	f001 fb4f 	bl	80050c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d024      	beq.n	8003a80 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	1e5a      	subs	r2, r3, #1
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003a46:	f001 f9d9 	bl	8004dfc <pvTaskIncrementMutexHeldCount>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00f      	beq.n	8003a78 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	3310      	adds	r3, #16
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fe4d 	bl	80046fc <xTaskRemoveFromEventList>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <xQueueSemaphoreTake+0x20c>)
 8003a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a78:	f001 fb54 	bl	8005124 <vPortExitCritical>
				return pdPASS;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e096      	b.n	8003bae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d110      	bne.n	8003aa8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d009      	beq.n	8003aa0 <xQueueSemaphoreTake+0xf4>
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e7fe      	b.n	8003a9e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003aa0:	f001 fb40 	bl	8005124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e082      	b.n	8003bae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aae:	f107 030c 	add.w	r3, r7, #12
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fe84 	bl	80047c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003abc:	f001 fb32 	bl	8005124 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ac0:	f000 fc38 	bl	8004334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ac4:	f001 fb00 	bl	80050c8 <vPortEnterCritical>
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad4:	d103      	bne.n	8003ade <xQueueSemaphoreTake+0x132>
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aea:	d103      	bne.n	8003af4 <xQueueSemaphoreTake+0x148>
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af4:	f001 fb16 	bl	8005124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003af8:	463a      	mov	r2, r7
 8003afa:	f107 030c 	add.w	r3, r7, #12
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fe73 	bl	80047ec <xTaskCheckForTimeOut>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d132      	bne.n	8003b72 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b0e:	f000 f9cb 	bl	8003ea8 <prvIsQueueEmpty>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d026      	beq.n	8003b66 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003b20:	f001 fad2 	bl	80050c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 ffbf 	bl	8004aac <xTaskPriorityInherit>
 8003b2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003b30:	f001 faf8 	bl	8005124 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	3324      	adds	r3, #36	; 0x24
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fdb9 	bl	80046b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b44:	f000 f95e 	bl	8003e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b48:	f000 fc02 	bl	8004350 <xTaskResumeAll>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f47f af69 	bne.w	8003a26 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003b54:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <xQueueSemaphoreTake+0x20c>)
 8003b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	e75f      	b.n	8003a26 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b68:	f000 f94c 	bl	8003e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b6c:	f000 fbf0 	bl	8004350 <xTaskResumeAll>
 8003b70:	e759      	b.n	8003a26 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b74:	f000 f946 	bl	8003e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b78:	f000 fbea 	bl	8004350 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b7e:	f000 f993 	bl	8003ea8 <prvIsQueueEmpty>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f43f af4e 	beq.w	8003a26 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003b90:	f001 fa9a 	bl	80050c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b96:	f000 f88e 	bl	8003cb6 <prvGetDisinheritPriorityAfterTimeout>
 8003b9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 f88c 	bl	8004cc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ba8:	f001 fabc 	bl	8005124 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3738      	adds	r7, #56	; 0x38
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08e      	sub	sp, #56	; 0x38
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <xQueueReceiveFromISR+0x2a>
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	623b      	str	r3, [r7, #32]
 8003be4:	e7fe      	b.n	8003be4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d103      	bne.n	8003bf4 <xQueueReceiveFromISR+0x38>
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <xQueueReceiveFromISR+0x3c>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <xQueueReceiveFromISR+0x3e>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <xQueueReceiveFromISR+0x56>
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	e7fe      	b.n	8003c10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c12:	f001 fb13 	bl	800523c <vPortValidateInterruptPriority>
	__asm volatile
 8003c16:	f3ef 8211 	mrs	r2, BASEPRI
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	61ba      	str	r2, [r7, #24]
 8003c2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d02f      	beq.n	8003c9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4c:	f000 f8b4 	bl	8003db8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c60:	d112      	bne.n	8003c88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	3310      	adds	r3, #16
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fd44 	bl	80046fc <xTaskRemoveFromEventList>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e007      	b.n	8003c98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	b25a      	sxtb	r2, r3
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9c:	e001      	b.n	8003ca2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3738      	adds	r7, #56	; 0x38
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d006      	beq.n	8003cd4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1c3 0307 	rsb	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e001      	b.n	8003cd8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
	}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d14d      	bne.n	8003da6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 ff52 	bl	8004bb8 <xTaskPriorityDisinherit>
 8003d14:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	e043      	b.n	8003da6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d119      	bne.n	8003d58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6898      	ldr	r0, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	f001 fcbe 	bl	80056b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	441a      	add	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d32b      	bcc.n	8003da6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	609a      	str	r2, [r3, #8]
 8003d56:	e026      	b.n	8003da6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68d8      	ldr	r0, [r3, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	461a      	mov	r2, r3
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	f001 fca4 	bl	80056b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	425b      	negs	r3, r3
 8003d72:	441a      	add	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d207      	bcs.n	8003d94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	425b      	negs	r3, r3
 8003d8e:	441a      	add	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d105      	bne.n	8003da6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003dae:	697b      	ldr	r3, [r7, #20]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	441a      	add	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d303      	bcc.n	8003dec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68d9      	ldr	r1, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	461a      	mov	r2, r3
 8003df6:	6838      	ldr	r0, [r7, #0]
 8003df8:	f001 fc5a 	bl	80056b0 <memcpy>
	}
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e0c:	f001 f95c 	bl	80050c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e18:	e011      	b.n	8003e3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d012      	beq.n	8003e48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3324      	adds	r3, #36	; 0x24
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fc68 	bl	80046fc <xTaskRemoveFromEventList>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e32:	f000 fd3b 	bl	80048ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	dce9      	bgt.n	8003e1a <prvUnlockQueue+0x16>
 8003e46:	e000      	b.n	8003e4a <prvUnlockQueue+0x46>
					break;
 8003e48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e52:	f001 f967 	bl	8005124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e56:	f001 f937 	bl	80050c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e62:	e011      	b.n	8003e88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d012      	beq.n	8003e92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3310      	adds	r3, #16
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fc43 	bl	80046fc <xTaskRemoveFromEventList>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e7c:	f000 fd16 	bl	80048ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e80:	7bbb      	ldrb	r3, [r7, #14]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dce9      	bgt.n	8003e64 <prvUnlockQueue+0x60>
 8003e90:	e000      	b.n	8003e94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e9c:	f001 f942 	bl	8005124 <vPortExitCritical>
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003eb0:	f001 f90a 	bl	80050c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e001      	b.n	8003ec6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ec6:	f001 f92d 	bl	8005124 <vPortExitCritical>

	return xReturn;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003edc:	f001 f8f4 	bl	80050c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d102      	bne.n	8003ef2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e001      	b.n	8003ef6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ef6:	f001 f915 	bl	8005124 <vPortExitCritical>

	return xReturn;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08e      	sub	sp, #56	; 0x38
 8003f08:	af04      	add	r7, sp, #16
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <xTaskCreateStatic+0x28>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	623b      	str	r3, [r7, #32]
 8003f2a:	e7fe      	b.n	8003f2a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <xTaskCreateStatic+0x42>
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	e7fe      	b.n	8003f44 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f46:	2354      	movs	r3, #84	; 0x54
 8003f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b54      	cmp	r3, #84	; 0x54
 8003f4e:	d009      	beq.n	8003f64 <xTaskCreateStatic+0x60>
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e7fe      	b.n	8003f62 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01e      	beq.n	8003fa8 <xTaskCreateStatic+0xa4>
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f82:	2300      	movs	r3, #0
 8003f84:	9303      	str	r3, [sp, #12]
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	9302      	str	r3, [sp, #8]
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f850 	bl	8004040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa2:	f000 f8cb 	bl	800413c <prvAddNewTaskToReadyList>
 8003fa6:	e001      	b.n	8003fac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fac:	697b      	ldr	r3, [r7, #20]
	}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3728      	adds	r7, #40	; 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b08c      	sub	sp, #48	; 0x30
 8003fba:	af04      	add	r7, sp, #16
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 f972 	bl	80052b4 <pvPortMalloc>
 8003fd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003fd8:	2054      	movs	r0, #84	; 0x54
 8003fda:	f001 f96b 	bl	80052b4 <pvPortMalloc>
 8003fde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
 8003fec:	e005      	b.n	8003ffa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fee:	6978      	ldr	r0, [r7, #20]
 8003ff0:	f001 fa22 	bl	8005438 <vPortFree>
 8003ff4:	e001      	b.n	8003ffa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d017      	beq.n	8004030 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	2300      	movs	r3, #0
 800400c:	9303      	str	r3, [sp, #12]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	9302      	str	r3, [sp, #8]
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f80e 	bl	8004040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004024:	69f8      	ldr	r0, [r7, #28]
 8004026:	f000 f889 	bl	800413c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800402a:	2301      	movs	r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e002      	b.n	8004036 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004034:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004036:	69bb      	ldr	r3, [r7, #24]
	}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004058:	3b01      	subs	r3, #1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f023 0307 	bic.w	r3, r3, #7
 8004066:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <prvInitialiseNewTask+0x46>
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e7fe      	b.n	8004084 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	e012      	b.n	80040b2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	7819      	ldrb	r1, [r3, #0]
 8004094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	3334      	adds	r3, #52	; 0x34
 800409c:	460a      	mov	r2, r1
 800409e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d9e9      	bls.n	800408c <prvInitialiseNewTask+0x4c>
 80040b8:	e000      	b.n	80040bc <prvInitialiseNewTask+0x7c>
		{
			break;
 80040ba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d901      	bls.n	80040ce <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040ca:	2306      	movs	r3, #6
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	2200      	movs	r2, #0
 80040de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	3304      	adds	r3, #4
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f8c8 	bl	800327a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	3318      	adds	r3, #24
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff f8c3 	bl	800327a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	f1c3 0207 	rsb	r2, r3, #7
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	2200      	movs	r2, #0
 800410e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	69b8      	ldr	r0, [r7, #24]
 800411e:	f000 fee7 	bl	8004ef0 <pxPortInitialiseStack>
 8004122:	4602      	mov	r2, r0
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004132:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004134:	bf00      	nop
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004144:	f000 ffc0 	bl	80050c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004148:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <prvAddNewTaskToReadyList+0xb8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <prvAddNewTaskToReadyList+0xb8>)
 8004150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004152:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800415a:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004160:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <prvAddNewTaskToReadyList+0xb8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d110      	bne.n	800418a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004168:	f000 fbc4 	bl	80048f4 <prvInitialiseTaskLists>
 800416c:	e00d      	b.n	800418a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <prvAddNewTaskToReadyList+0xc0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	429a      	cmp	r2, r3
 8004182:	d802      	bhi.n	800418a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004184:	4a1c      	ldr	r2, [pc, #112]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800418a:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <prvAddNewTaskToReadyList+0xc4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3301      	adds	r3, #1
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <prvAddNewTaskToReadyList+0xc4>)
 8004192:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	2201      	movs	r2, #1
 800419a:	409a      	lsls	r2, r3
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <prvAddNewTaskToReadyList+0xc8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	4a18      	ldr	r2, [pc, #96]	; (8004204 <prvAddNewTaskToReadyList+0xc8>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <prvAddNewTaskToReadyList+0xcc>)
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7ff f868 	bl	8003292 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041c2:	f000 ffaf 	bl	8005124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <prvAddNewTaskToReadyList+0xc0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	429a      	cmp	r2, r3
 80041da:	d207      	bcs.n	80041ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <prvAddNewTaskToReadyList+0xd0>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	200003e8 	.word	0x200003e8
 80041f8:	200002e8 	.word	0x200002e8
 80041fc:	200003f4 	.word	0x200003f4
 8004200:	20000404 	.word	0x20000404
 8004204:	200003f0 	.word	0x200003f0
 8004208:	200002ec 	.word	0x200002ec
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004222:	4b13      	ldr	r3, [pc, #76]	; (8004270 <vTaskDelay+0x60>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <vTaskDelay+0x2e>
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	e7fe      	b.n	800423c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800423e:	f000 f879 	bl	8004334 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004242:	2100      	movs	r1, #0
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fded 	bl	8004e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800424a:	f000 f881 	bl	8004350 <xTaskResumeAll>
 800424e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <vTaskDelay+0x64>)
 8004258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000410 	.word	0x20000410
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004286:	463a      	mov	r2, r7
 8004288:	1d39      	adds	r1, r7, #4
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	4618      	mov	r0, r3
 8004290:	f7fb ff5e 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	9202      	str	r2, [sp, #8]
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	2300      	movs	r3, #0
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	460a      	mov	r2, r1
 80042a6:	491d      	ldr	r1, [pc, #116]	; (800431c <vTaskStartScheduler+0xa4>)
 80042a8:	481d      	ldr	r0, [pc, #116]	; (8004320 <vTaskStartScheduler+0xa8>)
 80042aa:	f7ff fe2b 	bl	8003f04 <xTaskCreateStatic>
 80042ae:	4602      	mov	r2, r0
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <vTaskStartScheduler+0xac>)
 80042b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <vTaskStartScheduler+0xac>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	e001      	b.n	80042c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d115      	bne.n	80042f8 <vTaskStartScheduler+0x80>
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <vTaskStartScheduler+0xb0>)
 80042e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <vTaskStartScheduler+0xb4>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <vTaskStartScheduler+0xb8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042f2:	f000 fe79 	bl	8004fe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042f6:	e00d      	b.n	8004314 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042fe:	d109      	bne.n	8004314 <vTaskStartScheduler+0x9c>
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e7fe      	b.n	8004312 <vTaskStartScheduler+0x9a>
}
 8004314:	bf00      	nop
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08005fe0 	.word	0x08005fe0
 8004320:	080048c5 	.word	0x080048c5
 8004324:	2000040c 	.word	0x2000040c
 8004328:	20000408 	.word	0x20000408
 800432c:	200003f4 	.word	0x200003f4
 8004330:	200003ec 	.word	0x200003ec

08004334 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <vTaskSuspendAll+0x18>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	4a03      	ldr	r2, [pc, #12]	; (800434c <vTaskSuspendAll+0x18>)
 8004340:	6013      	str	r3, [r2, #0]
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000410 	.word	0x20000410

08004350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800435a:	2300      	movs	r3, #0
 800435c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800435e:	4b41      	ldr	r3, [pc, #260]	; (8004464 <xTaskResumeAll+0x114>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <xTaskResumeAll+0x2a>
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	e7fe      	b.n	8004378 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800437a:	f000 fea5 	bl	80050c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800437e:	4b39      	ldr	r3, [pc, #228]	; (8004464 <xTaskResumeAll+0x114>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3b01      	subs	r3, #1
 8004384:	4a37      	ldr	r2, [pc, #220]	; (8004464 <xTaskResumeAll+0x114>)
 8004386:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <xTaskResumeAll+0x114>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d161      	bne.n	8004454 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004390:	4b35      	ldr	r3, [pc, #212]	; (8004468 <xTaskResumeAll+0x118>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05d      	beq.n	8004454 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004398:	e02e      	b.n	80043f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800439a:	4b34      	ldr	r3, [pc, #208]	; (800446c <xTaskResumeAll+0x11c>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3318      	adds	r3, #24
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe ffce 	bl	8003348 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe ffc9 	bl	8003348 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	2201      	movs	r2, #1
 80043bc:	409a      	lsls	r2, r3
 80043be:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <xTaskResumeAll+0x120>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	4a2a      	ldr	r2, [pc, #168]	; (8004470 <xTaskResumeAll+0x120>)
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4a27      	ldr	r2, [pc, #156]	; (8004474 <xTaskResumeAll+0x124>)
 80043d6:	441a      	add	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f7fe ff57 	bl	8003292 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	4b23      	ldr	r3, [pc, #140]	; (8004478 <xTaskResumeAll+0x128>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80043f2:	4b22      	ldr	r3, [pc, #136]	; (800447c <xTaskResumeAll+0x12c>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f8:	4b1c      	ldr	r3, [pc, #112]	; (800446c <xTaskResumeAll+0x11c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1cc      	bne.n	800439a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004406:	f000 fb0f 	bl	8004a28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800440a:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <xTaskResumeAll+0x130>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d010      	beq.n	8004438 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004416:	f000 f837 	bl	8004488 <xTaskIncrementTick>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004420:	4b16      	ldr	r3, [pc, #88]	; (800447c <xTaskResumeAll+0x12c>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3b01      	subs	r3, #1
 800442a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f1      	bne.n	8004416 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <xTaskResumeAll+0x130>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <xTaskResumeAll+0x12c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <xTaskResumeAll+0x134>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004454:	f000 fe66 	bl	8005124 <vPortExitCritical>

	return xAlreadyYielded;
 8004458:	68bb      	ldr	r3, [r7, #8]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000410 	.word	0x20000410
 8004468:	200003e8 	.word	0x200003e8
 800446c:	200003a8 	.word	0x200003a8
 8004470:	200003f0 	.word	0x200003f0
 8004474:	200002ec 	.word	0x200002ec
 8004478:	200002e8 	.word	0x200002e8
 800447c:	200003fc 	.word	0x200003fc
 8004480:	200003f8 	.word	0x200003f8
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004492:	4b50      	ldr	r3, [pc, #320]	; (80045d4 <xTaskIncrementTick+0x14c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 808c 	bne.w	80045b4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800449c:	4b4e      	ldr	r3, [pc, #312]	; (80045d8 <xTaskIncrementTick+0x150>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044a4:	4a4c      	ldr	r2, [pc, #304]	; (80045d8 <xTaskIncrementTick+0x150>)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11f      	bne.n	80044f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80044b0:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <xTaskIncrementTick+0x154>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <xTaskIncrementTick+0x46>
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	e7fe      	b.n	80044cc <xTaskIncrementTick+0x44>
 80044ce:	4b43      	ldr	r3, [pc, #268]	; (80045dc <xTaskIncrementTick+0x154>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	4b42      	ldr	r3, [pc, #264]	; (80045e0 <xTaskIncrementTick+0x158>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a40      	ldr	r2, [pc, #256]	; (80045dc <xTaskIncrementTick+0x154>)
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4a40      	ldr	r2, [pc, #256]	; (80045e0 <xTaskIncrementTick+0x158>)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b40      	ldr	r3, [pc, #256]	; (80045e4 <xTaskIncrementTick+0x15c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a3e      	ldr	r2, [pc, #248]	; (80045e4 <xTaskIncrementTick+0x15c>)
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	f000 fa9c 	bl	8004a28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044f0:	4b3d      	ldr	r3, [pc, #244]	; (80045e8 <xTaskIncrementTick+0x160>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d34d      	bcc.n	8004596 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044fa:	4b38      	ldr	r3, [pc, #224]	; (80045dc <xTaskIncrementTick+0x154>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <xTaskIncrementTick+0x80>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <xTaskIncrementTick+0x82>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d004      	beq.n	8004518 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450e:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <xTaskIncrementTick+0x160>)
 8004510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004514:	601a      	str	r2, [r3, #0]
					break;
 8004516:	e03e      	b.n	8004596 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004518:	4b30      	ldr	r3, [pc, #192]	; (80045dc <xTaskIncrementTick+0x154>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d203      	bcs.n	8004538 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004530:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <xTaskIncrementTick+0x160>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6013      	str	r3, [r2, #0]
						break;
 8004536:	e02e      	b.n	8004596 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	3304      	adds	r3, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f7fe ff03 	bl	8003348 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	3318      	adds	r3, #24
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe fefa 	bl	8003348 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	4b23      	ldr	r3, [pc, #140]	; (80045ec <xTaskIncrementTick+0x164>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4313      	orrs	r3, r2
 8004562:	4a22      	ldr	r2, [pc, #136]	; (80045ec <xTaskIncrementTick+0x164>)
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <xTaskIncrementTick+0x168>)
 8004574:	441a      	add	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f7fe fe88 	bl	8003292 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <xTaskIncrementTick+0x16c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	429a      	cmp	r2, r3
 800458e:	d3b4      	bcc.n	80044fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004590:	2301      	movs	r3, #1
 8004592:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004594:	e7b1      	b.n	80044fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004596:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <xTaskIncrementTick+0x16c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	4914      	ldr	r1, [pc, #80]	; (80045f0 <xTaskIncrementTick+0x168>)
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d907      	bls.n	80045be <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80045ae:	2301      	movs	r3, #1
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e004      	b.n	80045be <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <xTaskIncrementTick+0x170>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a0f      	ldr	r2, [pc, #60]	; (80045f8 <xTaskIncrementTick+0x170>)
 80045bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <xTaskIncrementTick+0x174>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045ca:	697b      	ldr	r3, [r7, #20]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000410 	.word	0x20000410
 80045d8:	200003ec 	.word	0x200003ec
 80045dc:	200003a0 	.word	0x200003a0
 80045e0:	200003a4 	.word	0x200003a4
 80045e4:	20000400 	.word	0x20000400
 80045e8:	20000408 	.word	0x20000408
 80045ec:	200003f0 	.word	0x200003f0
 80045f0:	200002ec 	.word	0x200002ec
 80045f4:	200002e8 	.word	0x200002e8
 80045f8:	200003f8 	.word	0x200003f8
 80045fc:	200003fc 	.word	0x200003fc

08004600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <vTaskSwitchContext+0xa0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800460e:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <vTaskSwitchContext+0xa4>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004614:	e03e      	b.n	8004694 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <vTaskSwitchContext+0xa4>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800461c:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <vTaskSwitchContext+0xa8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800462a:	7afb      	ldrb	r3, [r7, #11]
 800462c:	f1c3 031f 	rsb	r3, r3, #31
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	491e      	ldr	r1, [pc, #120]	; (80046ac <vTaskSwitchContext+0xac>)
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	e7fe      	b.n	8004658 <vTaskSwitchContext+0x58>
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4a11      	ldr	r2, [pc, #68]	; (80046ac <vTaskSwitchContext+0xac>)
 8004666:	4413      	add	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	3308      	adds	r3, #8
 800467c:	429a      	cmp	r2, r3
 800467e:	d104      	bne.n	800468a <vTaskSwitchContext+0x8a>
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <vTaskSwitchContext+0xb0>)
 8004692:	6013      	str	r3, [r2, #0]
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000410 	.word	0x20000410
 80046a4:	200003fc 	.word	0x200003fc
 80046a8:	200003f0 	.word	0x200003f0
 80046ac:	200002ec 	.word	0x200002ec
 80046b0:	200002e8 	.word	0x200002e8

080046b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <vTaskPlaceOnEventList+0x24>
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e7fe      	b.n	80046d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <vTaskPlaceOnEventList+0x44>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3318      	adds	r3, #24
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fe fdf9 	bl	80032d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046e6:	2101      	movs	r1, #1
 80046e8:	6838      	ldr	r0, [r7, #0]
 80046ea:	f000 fb9b 	bl	8004e24 <prvAddCurrentTaskToDelayedList>
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200002e8 	.word	0x200002e8

080046fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <xTaskRemoveFromEventList+0x2a>
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e7fe      	b.n	8004724 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3318      	adds	r3, #24
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fe0c 	bl	8003348 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <xTaskRemoveFromEventList+0xac>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11c      	bne.n	8004772 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	3304      	adds	r3, #4
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe fe03 	bl	8003348 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	2201      	movs	r2, #1
 8004748:	409a      	lsls	r2, r3
 800474a:	4b18      	ldr	r3, [pc, #96]	; (80047ac <xTaskRemoveFromEventList+0xb0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4313      	orrs	r3, r2
 8004750:	4a16      	ldr	r2, [pc, #88]	; (80047ac <xTaskRemoveFromEventList+0xb0>)
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <xTaskRemoveFromEventList+0xb4>)
 8004762:	441a      	add	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7fe fd91 	bl	8003292 <vListInsertEnd>
 8004770:	e005      	b.n	800477e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3318      	adds	r3, #24
 8004776:	4619      	mov	r1, r3
 8004778:	480e      	ldr	r0, [pc, #56]	; (80047b4 <xTaskRemoveFromEventList+0xb8>)
 800477a:	f7fe fd8a 	bl	8003292 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <xTaskRemoveFromEventList+0xbc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	429a      	cmp	r2, r3
 800478a:	d905      	bls.n	8004798 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <xTaskRemoveFromEventList+0xc0>)
 8004792:	2201      	movs	r2, #1
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e001      	b.n	800479c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800479c:	697b      	ldr	r3, [r7, #20]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000410 	.word	0x20000410
 80047ac:	200003f0 	.word	0x200003f0
 80047b0:	200002ec 	.word	0x200002ec
 80047b4:	200003a8 	.word	0x200003a8
 80047b8:	200002e8 	.word	0x200002e8
 80047bc:	200003fc 	.word	0x200003fc

080047c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <vTaskInternalSetTimeOutState+0x24>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <vTaskInternalSetTimeOutState+0x28>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	605a      	str	r2, [r3, #4]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000400 	.word	0x20000400
 80047e8:	200003ec 	.word	0x200003ec

080047ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <xTaskCheckForTimeOut+0x24>
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e7fe      	b.n	800480e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <xTaskCheckForTimeOut+0x3e>
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e7fe      	b.n	8004828 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800482a:	f000 fc4d 	bl	80050c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800482e:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <xTaskCheckForTimeOut+0xb8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004846:	d102      	bne.n	800484e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e023      	b.n	8004896 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <xTaskCheckForTimeOut+0xbc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d007      	beq.n	800486a <xTaskCheckForTimeOut+0x7e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004864:	2301      	movs	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e015      	b.n	8004896 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	429a      	cmp	r2, r3
 8004872:	d20b      	bcs.n	800488c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1ad2      	subs	r2, r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff9d 	bl	80047c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	e004      	b.n	8004896 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004892:	2301      	movs	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004896:	f000 fc45 	bl	8005124 <vPortExitCritical>

	return xReturn;
 800489a:	69fb      	ldr	r3, [r7, #28]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	200003ec 	.word	0x200003ec
 80048a8:	20000400 	.word	0x20000400

080048ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <vTaskMissedYield+0x14>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
}
 80048b6:	bf00      	nop
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	200003fc 	.word	0x200003fc

080048c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048cc:	f000 f852 	bl	8004974 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <prvIdleTask+0x28>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d9f9      	bls.n	80048cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <prvIdleTask+0x2c>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048e8:	e7f0      	b.n	80048cc <prvIdleTask+0x8>
 80048ea:	bf00      	nop
 80048ec:	200002ec 	.word	0x200002ec
 80048f0:	e000ed04 	.word	0xe000ed04

080048f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
 80048fe:	e00c      	b.n	800491a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4a12      	ldr	r2, [pc, #72]	; (8004954 <prvInitialiseTaskLists+0x60>)
 800490c:	4413      	add	r3, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe fc94 	bl	800323c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3301      	adds	r3, #1
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b06      	cmp	r3, #6
 800491e:	d9ef      	bls.n	8004900 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004920:	480d      	ldr	r0, [pc, #52]	; (8004958 <prvInitialiseTaskLists+0x64>)
 8004922:	f7fe fc8b 	bl	800323c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004926:	480d      	ldr	r0, [pc, #52]	; (800495c <prvInitialiseTaskLists+0x68>)
 8004928:	f7fe fc88 	bl	800323c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800492c:	480c      	ldr	r0, [pc, #48]	; (8004960 <prvInitialiseTaskLists+0x6c>)
 800492e:	f7fe fc85 	bl	800323c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004932:	480c      	ldr	r0, [pc, #48]	; (8004964 <prvInitialiseTaskLists+0x70>)
 8004934:	f7fe fc82 	bl	800323c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004938:	480b      	ldr	r0, [pc, #44]	; (8004968 <prvInitialiseTaskLists+0x74>)
 800493a:	f7fe fc7f 	bl	800323c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <prvInitialiseTaskLists+0x78>)
 8004940:	4a05      	ldr	r2, [pc, #20]	; (8004958 <prvInitialiseTaskLists+0x64>)
 8004942:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <prvInitialiseTaskLists+0x7c>)
 8004946:	4a05      	ldr	r2, [pc, #20]	; (800495c <prvInitialiseTaskLists+0x68>)
 8004948:	601a      	str	r2, [r3, #0]
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200002ec 	.word	0x200002ec
 8004958:	20000378 	.word	0x20000378
 800495c:	2000038c 	.word	0x2000038c
 8004960:	200003a8 	.word	0x200003a8
 8004964:	200003bc 	.word	0x200003bc
 8004968:	200003d4 	.word	0x200003d4
 800496c:	200003a0 	.word	0x200003a0
 8004970:	200003a4 	.word	0x200003a4

08004974 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800497a:	e019      	b.n	80049b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800497c:	f000 fba4 	bl	80050c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <prvCheckTasksWaitingTermination+0x4c>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	4618      	mov	r0, r3
 800498e:	f7fe fcdb 	bl	8003348 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <prvCheckTasksWaitingTermination+0x50>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3b01      	subs	r3, #1
 8004998:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <prvCheckTasksWaitingTermination+0x50>)
 800499a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <prvCheckTasksWaitingTermination+0x54>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <prvCheckTasksWaitingTermination+0x54>)
 80049a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049a6:	f000 fbbd 	bl	8005124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f80e 	bl	80049cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <prvCheckTasksWaitingTermination+0x54>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e1      	bne.n	800497c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	200003bc 	.word	0x200003bc
 80049c4:	200003e8 	.word	0x200003e8
 80049c8:	200003d0 	.word	0x200003d0

080049cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fd28 	bl	8005438 <vPortFree>
				vPortFree( pxTCB );
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fd25 	bl	8005438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049ee:	e017      	b.n	8004a20 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d103      	bne.n	8004a02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fd1c 	bl	8005438 <vPortFree>
	}
 8004a00:	e00e      	b.n	8004a20 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d009      	beq.n	8004a20 <prvDeleteTCB+0x54>
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e7fe      	b.n	8004a1e <prvDeleteTCB+0x52>
	}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <prvResetNextTaskUnblockTime+0x40>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <prvResetNextTaskUnblockTime+0x14>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <prvResetNextTaskUnblockTime+0x16>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d004      	beq.n	8004a4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <prvResetNextTaskUnblockTime+0x44>)
 8004a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a4a:	e008      	b.n	8004a5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <prvResetNextTaskUnblockTime+0x40>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <prvResetNextTaskUnblockTime+0x44>)
 8004a5c:	6013      	str	r3, [r2, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	200003a0 	.word	0x200003a0
 8004a6c:	20000408 	.word	0x20000408

08004a70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <xTaskGetSchedulerState+0x34>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	e008      	b.n	8004a96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a84:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <xTaskGetSchedulerState+0x38>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	e001      	b.n	8004a96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a96:	687b      	ldr	r3, [r7, #4]
	}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	200003f4 	.word	0x200003f4
 8004aa8:	20000410 	.word	0x20000410

08004aac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d06e      	beq.n	8004ba0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	4b39      	ldr	r3, [pc, #228]	; (8004bac <xTaskPriorityInherit+0x100>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d25e      	bcs.n	8004b8e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	db06      	blt.n	8004ae6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad8:	4b34      	ldr	r3, [pc, #208]	; (8004bac <xTaskPriorityInherit+0x100>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	f1c3 0207 	rsb	r2, r3, #7
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6959      	ldr	r1, [r3, #20]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4a2e      	ldr	r2, [pc, #184]	; (8004bb0 <xTaskPriorityInherit+0x104>)
 8004af8:	4413      	add	r3, r2
 8004afa:	4299      	cmp	r1, r3
 8004afc:	d101      	bne.n	8004b02 <xTaskPriorityInherit+0x56>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <xTaskPriorityInherit+0x58>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d03a      	beq.n	8004b7e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe fc1b 	bl	8003348 <uxListRemove>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1c:	4924      	ldr	r1, [pc, #144]	; (8004bb0 <xTaskPriorityInherit+0x104>)
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <xTaskPriorityInherit+0x98>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	2201      	movs	r2, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43da      	mvns	r2, r3
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <xTaskPriorityInherit+0x108>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <xTaskPriorityInherit+0x108>)
 8004b42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <xTaskPriorityInherit+0x100>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	2201      	movs	r2, #1
 8004b54:	409a      	lsls	r2, r3
 8004b56:	4b17      	ldr	r3, [pc, #92]	; (8004bb4 <xTaskPriorityInherit+0x108>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <xTaskPriorityInherit+0x108>)
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <xTaskPriorityInherit+0x104>)
 8004b6e:	441a      	add	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f7fe fb8b 	bl	8003292 <vListInsertEnd>
 8004b7c:	e004      	b.n	8004b88 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <xTaskPriorityInherit+0x100>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e008      	b.n	8004ba0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <xTaskPriorityInherit+0x100>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d201      	bcs.n	8004ba0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
	}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200002e8 	.word	0x200002e8
 8004bb0:	200002ec 	.word	0x200002ec
 8004bb4:	200003f0 	.word	0x200003f0

08004bb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d06c      	beq.n	8004ca8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <xTaskPriorityDisinherit+0xfc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d009      	beq.n	8004bec <xTaskPriorityDisinherit+0x34>
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e7fe      	b.n	8004bea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <xTaskPriorityDisinherit+0x50>
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	e7fe      	b.n	8004c06 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d044      	beq.n	8004ca8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d140      	bne.n	8004ca8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fb8c 	bl	8003348 <uxListRemove>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d115      	bne.n	8004c62 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3a:	491f      	ldr	r1, [pc, #124]	; (8004cb8 <xTaskPriorityDisinherit+0x100>)
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xTaskPriorityDisinherit+0xaa>
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2201      	movs	r2, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43da      	mvns	r2, r3
 8004c58:	4b18      	ldr	r3, [pc, #96]	; (8004cbc <xTaskPriorityDisinherit+0x104>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <xTaskPriorityDisinherit+0x104>)
 8004c60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	f1c3 0207 	rsb	r2, r3, #7
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <xTaskPriorityDisinherit+0x104>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	4a0d      	ldr	r2, [pc, #52]	; (8004cbc <xTaskPriorityDisinherit+0x104>)
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <xTaskPriorityDisinherit+0x100>)
 8004c96:	441a      	add	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f7fe faf7 	bl	8003292 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ca8:	697b      	ldr	r3, [r7, #20]
	}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200002e8 	.word	0x200002e8
 8004cb8:	200002ec 	.word	0x200002ec
 8004cbc:	200003f0 	.word	0x200003f0

08004cc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8086 	beq.w	8004de6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e7fe      	b.n	8004cf4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d902      	bls.n	8004d06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	e002      	b.n	8004d0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d067      	beq.n	8004de6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d162      	bne.n	8004de6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d20:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d109      	bne.n	8004d3e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	e7fe      	b.n	8004d3c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	db04      	blt.n	8004d5c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f1c3 0207 	rsb	r2, r3, #7
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	6959      	ldr	r1, [r3, #20]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004d6c:	4413      	add	r3, r2
 8004d6e:	4299      	cmp	r1, r3
 8004d70:	d101      	bne.n	8004d76 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d034      	beq.n	8004de6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fae1 	bl	8003348 <uxListRemove>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d115      	bne.n	8004db8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d90:	4918      	ldr	r1, [pc, #96]	; (8004df4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	2201      	movs	r2, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43da      	mvns	r2, r3
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4013      	ands	r3, r2
 8004db4:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004db6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	4a0c      	ldr	r2, [pc, #48]	; (8004df8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004dd8:	441a      	add	r2, r3
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7fe fa56 	bl	8003292 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004de6:	bf00      	nop
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	200002e8 	.word	0x200002e8
 8004df4:	200002ec 	.word	0x200002ec
 8004df8:	200003f0 	.word	0x200003f0

08004dfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e0e:	3201      	adds	r2, #1
 8004e10:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004e12:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e14:	681b      	ldr	r3, [r3, #0]
	}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	200002e8 	.word	0x200002e8

08004e24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e2e:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e34:	4b28      	ldr	r3, [pc, #160]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fa84 	bl	8003348 <uxListRemove>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43da      	mvns	r2, r3
 8004e54:	4b21      	ldr	r3, [pc, #132]	; (8004edc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	4a20      	ldr	r2, [pc, #128]	; (8004edc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e64:	d10a      	bne.n	8004e7c <prvAddCurrentTaskToDelayedList+0x58>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4619      	mov	r1, r3
 8004e74:	481a      	ldr	r0, [pc, #104]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e76:	f7fe fa0c 	bl	8003292 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e7a:	e026      	b.n	8004eca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e84:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d209      	bcs.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e94:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7fe fa19 	bl	80032d8 <vListInsert>
}
 8004ea6:	e010      	b.n	8004eca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7fe fa0f 	bl	80032d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eba:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d202      	bcs.n	8004eca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ec4:	4a09      	ldr	r2, [pc, #36]	; (8004eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6013      	str	r3, [r2, #0]
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200003ec 	.word	0x200003ec
 8004ed8:	200002e8 	.word	0x200002e8
 8004edc:	200003f0 	.word	0x200003f0
 8004ee0:	200003d4 	.word	0x200003d4
 8004ee4:	200003a4 	.word	0x200003a4
 8004ee8:	200003a0 	.word	0x200003a0
 8004eec:	20000408 	.word	0x20000408

08004ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3b04      	subs	r3, #4
 8004f00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b04      	subs	r3, #4
 8004f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f023 0201 	bic.w	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3b04      	subs	r3, #4
 8004f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f20:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <pxPortInitialiseStack+0x54>)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3b14      	subs	r3, #20
 8004f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3b20      	subs	r3, #32
 8004f36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f38:	68fb      	ldr	r3, [r7, #12]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	08004f49 	.word	0x08004f49

08004f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <prvTaskExitError+0x4c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5a:	d009      	beq.n	8004f70 <prvTaskExitError+0x28>
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e7fe      	b.n	8004f6e <prvTaskExitError+0x26>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f82:	bf00      	nop
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0fc      	beq.n	8004f84 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	2000000c 	.word	0x2000000c
	...

08004fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <pxCurrentTCBConst2>)
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	6808      	ldr	r0, [r1, #0]
 8004fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004faa:	f380 8809 	msr	PSP, r0
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8811 	msr	BASEPRI, r0
 8004fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8004fbe:	4770      	bx	lr

08004fc0 <pxCurrentTCBConst2>:
 8004fc0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004fc8:	4806      	ldr	r0, [pc, #24]	; (8004fe4 <prvPortStartFirstTask+0x1c>)
 8004fca:	6800      	ldr	r0, [r0, #0]
 8004fcc:	6800      	ldr	r0, [r0, #0]
 8004fce:	f380 8808 	msr	MSP, r0
 8004fd2:	b662      	cpsie	i
 8004fd4:	b661      	cpsie	f
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	df00      	svc	0
 8004fe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fe2:	bf00      	nop
 8004fe4:	e000ed08 	.word	0xe000ed08

08004fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fee:	4b31      	ldr	r3, [pc, #196]	; (80050b4 <xPortStartScheduler+0xcc>)
 8004ff0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <xPortStartScheduler+0xd0>)
 8005014:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005016:	4b29      	ldr	r3, [pc, #164]	; (80050bc <xPortStartScheduler+0xd4>)
 8005018:	2207      	movs	r2, #7
 800501a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800501c:	e009      	b.n	8005032 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800501e:	4b27      	ldr	r3, [pc, #156]	; (80050bc <xPortStartScheduler+0xd4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3b01      	subs	r3, #1
 8005024:	4a25      	ldr	r2, [pc, #148]	; (80050bc <xPortStartScheduler+0xd4>)
 8005026:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	b2db      	uxtb	r3, r3
 8005030:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503a:	2b80      	cmp	r3, #128	; 0x80
 800503c:	d0ef      	beq.n	800501e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800503e:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <xPortStartScheduler+0xd4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f1c3 0307 	rsb	r3, r3, #7
 8005046:	2b04      	cmp	r3, #4
 8005048:	d009      	beq.n	800505e <xPortStartScheduler+0x76>
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	e7fe      	b.n	800505c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800505e:	4b17      	ldr	r3, [pc, #92]	; (80050bc <xPortStartScheduler+0xd4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	4a15      	ldr	r2, [pc, #84]	; (80050bc <xPortStartScheduler+0xd4>)
 8005066:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005068:	4b14      	ldr	r3, [pc, #80]	; (80050bc <xPortStartScheduler+0xd4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005070:	4a12      	ldr	r2, [pc, #72]	; (80050bc <xPortStartScheduler+0xd4>)
 8005072:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800507c:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <xPortStartScheduler+0xd8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a0f      	ldr	r2, [pc, #60]	; (80050c0 <xPortStartScheduler+0xd8>)
 8005082:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005086:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005088:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <xPortStartScheduler+0xd8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a0c      	ldr	r2, [pc, #48]	; (80050c0 <xPortStartScheduler+0xd8>)
 800508e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005092:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005094:	f000 f8b0 	bl	80051f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005098:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <xPortStartScheduler+0xdc>)
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800509e:	f7ff ff93 	bl	8004fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050a2:	f7ff faad 	bl	8004600 <vTaskSwitchContext>
	prvTaskExitError();
 80050a6:	f7ff ff4f 	bl	8004f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	e000e400 	.word	0xe000e400
 80050b8:	20000414 	.word	0x20000414
 80050bc:	20000418 	.word	0x20000418
 80050c0:	e000ed20 	.word	0xe000ed20
 80050c4:	2000000c 	.word	0x2000000c

080050c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050e0:	4b0e      	ldr	r3, [pc, #56]	; (800511c <vPortEnterCritical+0x54>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4a0d      	ldr	r2, [pc, #52]	; (800511c <vPortEnterCritical+0x54>)
 80050e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050ea:	4b0c      	ldr	r3, [pc, #48]	; (800511c <vPortEnterCritical+0x54>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d10e      	bne.n	8005110 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <vPortEnterCritical+0x58>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d009      	beq.n	8005110 <vPortEnterCritical+0x48>
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	e7fe      	b.n	800510e <vPortEnterCritical+0x46>
	}
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	2000000c 	.word	0x2000000c
 8005120:	e000ed04 	.word	0xe000ed04

08005124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <vPortExitCritical+0x48>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d109      	bne.n	8005146 <vPortExitCritical+0x22>
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	e7fe      	b.n	8005144 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <vPortExitCritical+0x48>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3b01      	subs	r3, #1
 800514c:	4a07      	ldr	r2, [pc, #28]	; (800516c <vPortExitCritical+0x48>)
 800514e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005150:	4b06      	ldr	r3, [pc, #24]	; (800516c <vPortExitCritical+0x48>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <vPortExitCritical+0x3e>
 8005158:	2300      	movs	r3, #0
 800515a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	2000000c 	.word	0x2000000c

08005170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005170:	f3ef 8009 	mrs	r0, PSP
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <pxCurrentTCBConst>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005180:	6010      	str	r0, [r2, #0]
 8005182:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005186:	f04f 0050 	mov.w	r0, #80	; 0x50
 800518a:	f380 8811 	msr	BASEPRI, r0
 800518e:	f7ff fa37 	bl	8004600 <vTaskSwitchContext>
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8811 	msr	BASEPRI, r0
 800519a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	6808      	ldr	r0, [r1, #0]
 80051a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051a6:	f380 8809 	msr	PSP, r0
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	4770      	bx	lr

080051b0 <pxCurrentTCBConst>:
 80051b0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051d0:	f7ff f95a 	bl	8004488 <xTaskIncrementTick>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <SysTick_Handler+0x3c>)
 80051dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	2300      	movs	r3, #0
 80051e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <vPortSetupTimerInterrupt+0x30>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <vPortSetupTimerInterrupt+0x34>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <vPortSetupTimerInterrupt+0x38>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <vPortSetupTimerInterrupt+0x3c>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	099b      	lsrs	r3, r3, #6
 8005214:	4a08      	ldr	r2, [pc, #32]	; (8005238 <vPortSetupTimerInterrupt+0x40>)
 8005216:	3b01      	subs	r3, #1
 8005218:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800521a:	4b03      	ldr	r3, [pc, #12]	; (8005228 <vPortSetupTimerInterrupt+0x30>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	e000e010 	.word	0xe000e010
 800522c:	e000e018 	.word	0xe000e018
 8005230:	20000000 	.word	0x20000000
 8005234:	10624dd3 	.word	0x10624dd3
 8005238:	e000e014 	.word	0xe000e014

0800523c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005242:	f3ef 8305 	mrs	r3, IPSR
 8005246:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d913      	bls.n	8005276 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800524e:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <vPortValidateInterruptPriority+0x68>)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005258:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <vPortValidateInterruptPriority+0x6c>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	7afa      	ldrb	r2, [r7, #11]
 800525e:	429a      	cmp	r2, r3
 8005260:	d209      	bcs.n	8005276 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	e7fe      	b.n	8005274 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <vPortValidateInterruptPriority+0x70>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <vPortValidateInterruptPriority+0x74>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d909      	bls.n	800529a <vPortValidateInterruptPriority+0x5e>
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	e7fe      	b.n	8005298 <vPortValidateInterruptPriority+0x5c>
	}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr
 80052a4:	e000e3f0 	.word	0xe000e3f0
 80052a8:	20000414 	.word	0x20000414
 80052ac:	e000ed0c 	.word	0xe000ed0c
 80052b0:	20000418 	.word	0x20000418

080052b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	; 0x28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052c0:	f7ff f838 	bl	8004334 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052c4:	4b57      	ldr	r3, [pc, #348]	; (8005424 <pvPortMalloc+0x170>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052cc:	f000 f90c 	bl	80054e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052d0:	4b55      	ldr	r3, [pc, #340]	; (8005428 <pvPortMalloc+0x174>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f040 808c 	bne.w	80053f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01c      	beq.n	800531e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80052e4:	2208      	movs	r2, #8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d013      	beq.n	800531e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f023 0307 	bic.w	r3, r3, #7
 80052fc:	3308      	adds	r3, #8
 80052fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <pvPortMalloc+0x6a>
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e7fe      	b.n	800531c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d068      	beq.n	80053f6 <pvPortMalloc+0x142>
 8005324:	4b41      	ldr	r3, [pc, #260]	; (800542c <pvPortMalloc+0x178>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d863      	bhi.n	80053f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800532e:	4b40      	ldr	r3, [pc, #256]	; (8005430 <pvPortMalloc+0x17c>)
 8005330:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005332:	4b3f      	ldr	r3, [pc, #252]	; (8005430 <pvPortMalloc+0x17c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005338:	e004      	b.n	8005344 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	429a      	cmp	r2, r3
 800534c:	d903      	bls.n	8005356 <pvPortMalloc+0xa2>
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f1      	bne.n	800533a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005356:	4b33      	ldr	r3, [pc, #204]	; (8005424 <pvPortMalloc+0x170>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	429a      	cmp	r2, r3
 800535e:	d04a      	beq.n	80053f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2208      	movs	r2, #8
 8005366:	4413      	add	r3, r2
 8005368:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1ad2      	subs	r2, r2, r3
 800537a:	2308      	movs	r3, #8
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	429a      	cmp	r2, r3
 8005380:	d91e      	bls.n	80053c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <pvPortMalloc+0xf4>
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	e7fe      	b.n	80053a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053ba:	69b8      	ldr	r0, [r7, #24]
 80053bc:	f000 f8f6 	bl	80055ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053c0:	4b1a      	ldr	r3, [pc, #104]	; (800542c <pvPortMalloc+0x178>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	4a18      	ldr	r2, [pc, #96]	; (800542c <pvPortMalloc+0x178>)
 80053cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ce:	4b17      	ldr	r3, [pc, #92]	; (800542c <pvPortMalloc+0x178>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b18      	ldr	r3, [pc, #96]	; (8005434 <pvPortMalloc+0x180>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d203      	bcs.n	80053e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <pvPortMalloc+0x178>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a15      	ldr	r2, [pc, #84]	; (8005434 <pvPortMalloc+0x180>)
 80053e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <pvPortMalloc+0x174>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053f6:	f7fe ffab 	bl	8004350 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	2b00      	cmp	r3, #0
 8005402:	d009      	beq.n	8005418 <pvPortMalloc+0x164>
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	e7fe      	b.n	8005416 <pvPortMalloc+0x162>
	return pvReturn;
 8005418:	69fb      	ldr	r3, [r7, #28]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3728      	adds	r7, #40	; 0x28
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20001024 	.word	0x20001024
 8005428:	20001030 	.word	0x20001030
 800542c:	20001028 	.word	0x20001028
 8005430:	2000101c 	.word	0x2000101c
 8005434:	2000102c 	.word	0x2000102c

08005438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d046      	beq.n	80054d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800544a:	2308      	movs	r3, #8
 800544c:	425b      	negs	r3, r3
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4413      	add	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <vPortFree+0xa8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4013      	ands	r3, r2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <vPortFree+0x42>
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e7fe      	b.n	8005478 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <vPortFree+0x5e>
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	e7fe      	b.n	8005494 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <vPortFree+0xa8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d019      	beq.n	80054d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d115      	bne.n	80054d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <vPortFree+0xa8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	43db      	mvns	r3, r3
 80054b6:	401a      	ands	r2, r3
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054bc:	f7fe ff3a 	bl	8004334 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <vPortFree+0xac>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4413      	add	r3, r2
 80054ca:	4a06      	ldr	r2, [pc, #24]	; (80054e4 <vPortFree+0xac>)
 80054cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ce:	6938      	ldr	r0, [r7, #16]
 80054d0:	f000 f86c 	bl	80055ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054d4:	f7fe ff3c 	bl	8004350 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054d8:	bf00      	nop
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20001030 	.word	0x20001030
 80054e4:	20001028 	.word	0x20001028

080054e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054f4:	4b27      	ldr	r3, [pc, #156]	; (8005594 <prvHeapInit+0xac>)
 80054f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00c      	beq.n	800551c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3307      	adds	r3, #7
 8005506:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0307 	bic.w	r3, r3, #7
 800550e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <prvHeapInit+0xac>)
 8005518:	4413      	add	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005520:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <prvHeapInit+0xb0>)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005526:	4b1c      	ldr	r3, [pc, #112]	; (8005598 <prvHeapInit+0xb0>)
 8005528:	2200      	movs	r2, #0
 800552a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	4413      	add	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005534:	2208      	movs	r2, #8
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0307 	bic.w	r3, r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4a15      	ldr	r2, [pc, #84]	; (800559c <prvHeapInit+0xb4>)
 8005548:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800554a:	4b14      	ldr	r3, [pc, #80]	; (800559c <prvHeapInit+0xb4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005552:	4b12      	ldr	r3, [pc, #72]	; (800559c <prvHeapInit+0xb4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	1ad2      	subs	r2, r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <prvHeapInit+0xb4>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <prvHeapInit+0xb8>)
 8005576:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4a09      	ldr	r2, [pc, #36]	; (80055a4 <prvHeapInit+0xbc>)
 800557e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005580:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <prvHeapInit+0xc0>)
 8005582:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005586:	601a      	str	r2, [r3, #0]
}
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	2000041c 	.word	0x2000041c
 8005598:	2000101c 	.word	0x2000101c
 800559c:	20001024 	.word	0x20001024
 80055a0:	2000102c 	.word	0x2000102c
 80055a4:	20001028 	.word	0x20001028
 80055a8:	20001030 	.word	0x20001030

080055ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055b4:	4b27      	ldr	r3, [pc, #156]	; (8005654 <prvInsertBlockIntoFreeList+0xa8>)
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e002      	b.n	80055c0 <prvInsertBlockIntoFreeList+0x14>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d8f7      	bhi.n	80055ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	4413      	add	r3, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d108      	bne.n	80055ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	441a      	add	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	441a      	add	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d118      	bne.n	8005634 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <prvInsertBlockIntoFreeList+0xac>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d00d      	beq.n	800562a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	441a      	add	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e008      	b.n	800563c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800562a:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <prvInsertBlockIntoFreeList+0xac>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e003      	b.n	800563c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d002      	beq.n	800564a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr
 8005654:	2000101c 	.word	0x2000101c
 8005658:	20001024 	.word	0x20001024

0800565c <__errno>:
 800565c:	4b01      	ldr	r3, [pc, #4]	; (8005664 <__errno+0x8>)
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000010 	.word	0x20000010

08005668 <__libc_init_array>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	2500      	movs	r5, #0
 800566c:	4e0c      	ldr	r6, [pc, #48]	; (80056a0 <__libc_init_array+0x38>)
 800566e:	4c0d      	ldr	r4, [pc, #52]	; (80056a4 <__libc_init_array+0x3c>)
 8005670:	1ba4      	subs	r4, r4, r6
 8005672:	10a4      	asrs	r4, r4, #2
 8005674:	42a5      	cmp	r5, r4
 8005676:	d109      	bne.n	800568c <__libc_init_array+0x24>
 8005678:	f000 fc36 	bl	8005ee8 <_init>
 800567c:	2500      	movs	r5, #0
 800567e:	4e0a      	ldr	r6, [pc, #40]	; (80056a8 <__libc_init_array+0x40>)
 8005680:	4c0a      	ldr	r4, [pc, #40]	; (80056ac <__libc_init_array+0x44>)
 8005682:	1ba4      	subs	r4, r4, r6
 8005684:	10a4      	asrs	r4, r4, #2
 8005686:	42a5      	cmp	r5, r4
 8005688:	d105      	bne.n	8005696 <__libc_init_array+0x2e>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005690:	4798      	blx	r3
 8005692:	3501      	adds	r5, #1
 8005694:	e7ee      	b.n	8005674 <__libc_init_array+0xc>
 8005696:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800569a:	4798      	blx	r3
 800569c:	3501      	adds	r5, #1
 800569e:	e7f2      	b.n	8005686 <__libc_init_array+0x1e>
 80056a0:	0800625c 	.word	0x0800625c
 80056a4:	0800625c 	.word	0x0800625c
 80056a8:	0800625c 	.word	0x0800625c
 80056ac:	08006260 	.word	0x08006260

080056b0 <memcpy>:
 80056b0:	b510      	push	{r4, lr}
 80056b2:	1e43      	subs	r3, r0, #1
 80056b4:	440a      	add	r2, r1
 80056b6:	4291      	cmp	r1, r2
 80056b8:	d100      	bne.n	80056bc <memcpy+0xc>
 80056ba:	bd10      	pop	{r4, pc}
 80056bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c4:	e7f7      	b.n	80056b6 <memcpy+0x6>

080056c6 <memset>:
 80056c6:	4603      	mov	r3, r0
 80056c8:	4402      	add	r2, r0
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d100      	bne.n	80056d0 <memset+0xa>
 80056ce:	4770      	bx	lr
 80056d0:	f803 1b01 	strb.w	r1, [r3], #1
 80056d4:	e7f9      	b.n	80056ca <memset+0x4>
	...

080056d8 <siprintf>:
 80056d8:	b40e      	push	{r1, r2, r3}
 80056da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056de:	b500      	push	{lr}
 80056e0:	b09c      	sub	sp, #112	; 0x70
 80056e2:	ab1d      	add	r3, sp, #116	; 0x74
 80056e4:	9002      	str	r0, [sp, #8]
 80056e6:	9006      	str	r0, [sp, #24]
 80056e8:	9107      	str	r1, [sp, #28]
 80056ea:	9104      	str	r1, [sp, #16]
 80056ec:	4808      	ldr	r0, [pc, #32]	; (8005710 <siprintf+0x38>)
 80056ee:	4909      	ldr	r1, [pc, #36]	; (8005714 <siprintf+0x3c>)
 80056f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056f4:	9105      	str	r1, [sp, #20]
 80056f6:	6800      	ldr	r0, [r0, #0]
 80056f8:	a902      	add	r1, sp, #8
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	f000 f866 	bl	80057cc <_svfiprintf_r>
 8005700:	2200      	movs	r2, #0
 8005702:	9b02      	ldr	r3, [sp, #8]
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	b01c      	add	sp, #112	; 0x70
 8005708:	f85d eb04 	ldr.w	lr, [sp], #4
 800570c:	b003      	add	sp, #12
 800570e:	4770      	bx	lr
 8005710:	20000010 	.word	0x20000010
 8005714:	ffff0208 	.word	0xffff0208

08005718 <__ssputs_r>:
 8005718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800571c:	688e      	ldr	r6, [r1, #8]
 800571e:	4682      	mov	sl, r0
 8005720:	429e      	cmp	r6, r3
 8005722:	460c      	mov	r4, r1
 8005724:	4690      	mov	r8, r2
 8005726:	4699      	mov	r9, r3
 8005728:	d837      	bhi.n	800579a <__ssputs_r+0x82>
 800572a:	898a      	ldrh	r2, [r1, #12]
 800572c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005730:	d031      	beq.n	8005796 <__ssputs_r+0x7e>
 8005732:	2302      	movs	r3, #2
 8005734:	6825      	ldr	r5, [r4, #0]
 8005736:	6909      	ldr	r1, [r1, #16]
 8005738:	1a6f      	subs	r7, r5, r1
 800573a:	6965      	ldr	r5, [r4, #20]
 800573c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005740:	fb95 f5f3 	sdiv	r5, r5, r3
 8005744:	f109 0301 	add.w	r3, r9, #1
 8005748:	443b      	add	r3, r7
 800574a:	429d      	cmp	r5, r3
 800574c:	bf38      	it	cc
 800574e:	461d      	movcc	r5, r3
 8005750:	0553      	lsls	r3, r2, #21
 8005752:	d530      	bpl.n	80057b6 <__ssputs_r+0x9e>
 8005754:	4629      	mov	r1, r5
 8005756:	f000 fb2d 	bl	8005db4 <_malloc_r>
 800575a:	4606      	mov	r6, r0
 800575c:	b950      	cbnz	r0, 8005774 <__ssputs_r+0x5c>
 800575e:	230c      	movs	r3, #12
 8005760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005764:	f8ca 3000 	str.w	r3, [sl]
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	463a      	mov	r2, r7
 8005776:	6921      	ldr	r1, [r4, #16]
 8005778:	f7ff ff9a 	bl	80056b0 <memcpy>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	6126      	str	r6, [r4, #16]
 800578a:	443e      	add	r6, r7
 800578c:	6026      	str	r6, [r4, #0]
 800578e:	464e      	mov	r6, r9
 8005790:	6165      	str	r5, [r4, #20]
 8005792:	1bed      	subs	r5, r5, r7
 8005794:	60a5      	str	r5, [r4, #8]
 8005796:	454e      	cmp	r6, r9
 8005798:	d900      	bls.n	800579c <__ssputs_r+0x84>
 800579a:	464e      	mov	r6, r9
 800579c:	4632      	mov	r2, r6
 800579e:	4641      	mov	r1, r8
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	f000 faa1 	bl	8005ce8 <memmove>
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	2000      	movs	r0, #0
 80057aa:	1b9b      	subs	r3, r3, r6
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	441e      	add	r6, r3
 80057b2:	6026      	str	r6, [r4, #0]
 80057b4:	e7dc      	b.n	8005770 <__ssputs_r+0x58>
 80057b6:	462a      	mov	r2, r5
 80057b8:	f000 fb56 	bl	8005e68 <_realloc_r>
 80057bc:	4606      	mov	r6, r0
 80057be:	2800      	cmp	r0, #0
 80057c0:	d1e2      	bne.n	8005788 <__ssputs_r+0x70>
 80057c2:	6921      	ldr	r1, [r4, #16]
 80057c4:	4650      	mov	r0, sl
 80057c6:	f000 faa9 	bl	8005d1c <_free_r>
 80057ca:	e7c8      	b.n	800575e <__ssputs_r+0x46>

080057cc <_svfiprintf_r>:
 80057cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d0:	461d      	mov	r5, r3
 80057d2:	898b      	ldrh	r3, [r1, #12]
 80057d4:	b09d      	sub	sp, #116	; 0x74
 80057d6:	061f      	lsls	r7, r3, #24
 80057d8:	4680      	mov	r8, r0
 80057da:	460c      	mov	r4, r1
 80057dc:	4616      	mov	r6, r2
 80057de:	d50f      	bpl.n	8005800 <_svfiprintf_r+0x34>
 80057e0:	690b      	ldr	r3, [r1, #16]
 80057e2:	b96b      	cbnz	r3, 8005800 <_svfiprintf_r+0x34>
 80057e4:	2140      	movs	r1, #64	; 0x40
 80057e6:	f000 fae5 	bl	8005db4 <_malloc_r>
 80057ea:	6020      	str	r0, [r4, #0]
 80057ec:	6120      	str	r0, [r4, #16]
 80057ee:	b928      	cbnz	r0, 80057fc <_svfiprintf_r+0x30>
 80057f0:	230c      	movs	r3, #12
 80057f2:	f8c8 3000 	str.w	r3, [r8]
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057fa:	e0c8      	b.n	800598e <_svfiprintf_r+0x1c2>
 80057fc:	2340      	movs	r3, #64	; 0x40
 80057fe:	6163      	str	r3, [r4, #20]
 8005800:	2300      	movs	r3, #0
 8005802:	9309      	str	r3, [sp, #36]	; 0x24
 8005804:	2320      	movs	r3, #32
 8005806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800580a:	2330      	movs	r3, #48	; 0x30
 800580c:	f04f 0b01 	mov.w	fp, #1
 8005810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005814:	9503      	str	r5, [sp, #12]
 8005816:	4637      	mov	r7, r6
 8005818:	463d      	mov	r5, r7
 800581a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800581e:	b10b      	cbz	r3, 8005824 <_svfiprintf_r+0x58>
 8005820:	2b25      	cmp	r3, #37	; 0x25
 8005822:	d13e      	bne.n	80058a2 <_svfiprintf_r+0xd6>
 8005824:	ebb7 0a06 	subs.w	sl, r7, r6
 8005828:	d00b      	beq.n	8005842 <_svfiprintf_r+0x76>
 800582a:	4653      	mov	r3, sl
 800582c:	4632      	mov	r2, r6
 800582e:	4621      	mov	r1, r4
 8005830:	4640      	mov	r0, r8
 8005832:	f7ff ff71 	bl	8005718 <__ssputs_r>
 8005836:	3001      	adds	r0, #1
 8005838:	f000 80a4 	beq.w	8005984 <_svfiprintf_r+0x1b8>
 800583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583e:	4453      	add	r3, sl
 8005840:	9309      	str	r3, [sp, #36]	; 0x24
 8005842:	783b      	ldrb	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 809d 	beq.w	8005984 <_svfiprintf_r+0x1b8>
 800584a:	2300      	movs	r3, #0
 800584c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	9307      	str	r3, [sp, #28]
 8005858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800585c:	931a      	str	r3, [sp, #104]	; 0x68
 800585e:	462f      	mov	r7, r5
 8005860:	2205      	movs	r2, #5
 8005862:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005866:	4850      	ldr	r0, [pc, #320]	; (80059a8 <_svfiprintf_r+0x1dc>)
 8005868:	f000 fa30 	bl	8005ccc <memchr>
 800586c:	9b04      	ldr	r3, [sp, #16]
 800586e:	b9d0      	cbnz	r0, 80058a6 <_svfiprintf_r+0xda>
 8005870:	06d9      	lsls	r1, r3, #27
 8005872:	bf44      	itt	mi
 8005874:	2220      	movmi	r2, #32
 8005876:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800587a:	071a      	lsls	r2, r3, #28
 800587c:	bf44      	itt	mi
 800587e:	222b      	movmi	r2, #43	; 0x2b
 8005880:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005884:	782a      	ldrb	r2, [r5, #0]
 8005886:	2a2a      	cmp	r2, #42	; 0x2a
 8005888:	d015      	beq.n	80058b6 <_svfiprintf_r+0xea>
 800588a:	462f      	mov	r7, r5
 800588c:	2000      	movs	r0, #0
 800588e:	250a      	movs	r5, #10
 8005890:	9a07      	ldr	r2, [sp, #28]
 8005892:	4639      	mov	r1, r7
 8005894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005898:	3b30      	subs	r3, #48	; 0x30
 800589a:	2b09      	cmp	r3, #9
 800589c:	d94d      	bls.n	800593a <_svfiprintf_r+0x16e>
 800589e:	b1b8      	cbz	r0, 80058d0 <_svfiprintf_r+0x104>
 80058a0:	e00f      	b.n	80058c2 <_svfiprintf_r+0xf6>
 80058a2:	462f      	mov	r7, r5
 80058a4:	e7b8      	b.n	8005818 <_svfiprintf_r+0x4c>
 80058a6:	4a40      	ldr	r2, [pc, #256]	; (80059a8 <_svfiprintf_r+0x1dc>)
 80058a8:	463d      	mov	r5, r7
 80058aa:	1a80      	subs	r0, r0, r2
 80058ac:	fa0b f000 	lsl.w	r0, fp, r0
 80058b0:	4318      	orrs	r0, r3
 80058b2:	9004      	str	r0, [sp, #16]
 80058b4:	e7d3      	b.n	800585e <_svfiprintf_r+0x92>
 80058b6:	9a03      	ldr	r2, [sp, #12]
 80058b8:	1d11      	adds	r1, r2, #4
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	9103      	str	r1, [sp, #12]
 80058be:	2a00      	cmp	r2, #0
 80058c0:	db01      	blt.n	80058c6 <_svfiprintf_r+0xfa>
 80058c2:	9207      	str	r2, [sp, #28]
 80058c4:	e004      	b.n	80058d0 <_svfiprintf_r+0x104>
 80058c6:	4252      	negs	r2, r2
 80058c8:	f043 0302 	orr.w	r3, r3, #2
 80058cc:	9207      	str	r2, [sp, #28]
 80058ce:	9304      	str	r3, [sp, #16]
 80058d0:	783b      	ldrb	r3, [r7, #0]
 80058d2:	2b2e      	cmp	r3, #46	; 0x2e
 80058d4:	d10c      	bne.n	80058f0 <_svfiprintf_r+0x124>
 80058d6:	787b      	ldrb	r3, [r7, #1]
 80058d8:	2b2a      	cmp	r3, #42	; 0x2a
 80058da:	d133      	bne.n	8005944 <_svfiprintf_r+0x178>
 80058dc:	9b03      	ldr	r3, [sp, #12]
 80058de:	3702      	adds	r7, #2
 80058e0:	1d1a      	adds	r2, r3, #4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	9203      	str	r2, [sp, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bfb8      	it	lt
 80058ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058ee:	9305      	str	r3, [sp, #20]
 80058f0:	4d2e      	ldr	r5, [pc, #184]	; (80059ac <_svfiprintf_r+0x1e0>)
 80058f2:	2203      	movs	r2, #3
 80058f4:	7839      	ldrb	r1, [r7, #0]
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 f9e8 	bl	8005ccc <memchr>
 80058fc:	b138      	cbz	r0, 800590e <_svfiprintf_r+0x142>
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	1b40      	subs	r0, r0, r5
 8005902:	fa03 f000 	lsl.w	r0, r3, r0
 8005906:	9b04      	ldr	r3, [sp, #16]
 8005908:	3701      	adds	r7, #1
 800590a:	4303      	orrs	r3, r0
 800590c:	9304      	str	r3, [sp, #16]
 800590e:	7839      	ldrb	r1, [r7, #0]
 8005910:	2206      	movs	r2, #6
 8005912:	4827      	ldr	r0, [pc, #156]	; (80059b0 <_svfiprintf_r+0x1e4>)
 8005914:	1c7e      	adds	r6, r7, #1
 8005916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800591a:	f000 f9d7 	bl	8005ccc <memchr>
 800591e:	2800      	cmp	r0, #0
 8005920:	d038      	beq.n	8005994 <_svfiprintf_r+0x1c8>
 8005922:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <_svfiprintf_r+0x1e8>)
 8005924:	bb13      	cbnz	r3, 800596c <_svfiprintf_r+0x1a0>
 8005926:	9b03      	ldr	r3, [sp, #12]
 8005928:	3307      	adds	r3, #7
 800592a:	f023 0307 	bic.w	r3, r3, #7
 800592e:	3308      	adds	r3, #8
 8005930:	9303      	str	r3, [sp, #12]
 8005932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005934:	444b      	add	r3, r9
 8005936:	9309      	str	r3, [sp, #36]	; 0x24
 8005938:	e76d      	b.n	8005816 <_svfiprintf_r+0x4a>
 800593a:	fb05 3202 	mla	r2, r5, r2, r3
 800593e:	2001      	movs	r0, #1
 8005940:	460f      	mov	r7, r1
 8005942:	e7a6      	b.n	8005892 <_svfiprintf_r+0xc6>
 8005944:	2300      	movs	r3, #0
 8005946:	250a      	movs	r5, #10
 8005948:	4619      	mov	r1, r3
 800594a:	3701      	adds	r7, #1
 800594c:	9305      	str	r3, [sp, #20]
 800594e:	4638      	mov	r0, r7
 8005950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005954:	3a30      	subs	r2, #48	; 0x30
 8005956:	2a09      	cmp	r2, #9
 8005958:	d903      	bls.n	8005962 <_svfiprintf_r+0x196>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0c8      	beq.n	80058f0 <_svfiprintf_r+0x124>
 800595e:	9105      	str	r1, [sp, #20]
 8005960:	e7c6      	b.n	80058f0 <_svfiprintf_r+0x124>
 8005962:	fb05 2101 	mla	r1, r5, r1, r2
 8005966:	2301      	movs	r3, #1
 8005968:	4607      	mov	r7, r0
 800596a:	e7f0      	b.n	800594e <_svfiprintf_r+0x182>
 800596c:	ab03      	add	r3, sp, #12
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	4622      	mov	r2, r4
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <_svfiprintf_r+0x1ec>)
 8005974:	a904      	add	r1, sp, #16
 8005976:	4640      	mov	r0, r8
 8005978:	f3af 8000 	nop.w
 800597c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005980:	4681      	mov	r9, r0
 8005982:	d1d6      	bne.n	8005932 <_svfiprintf_r+0x166>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	065b      	lsls	r3, r3, #25
 8005988:	f53f af35 	bmi.w	80057f6 <_svfiprintf_r+0x2a>
 800598c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800598e:	b01d      	add	sp, #116	; 0x74
 8005990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005994:	ab03      	add	r3, sp, #12
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	4622      	mov	r2, r4
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <_svfiprintf_r+0x1ec>)
 800599c:	a904      	add	r1, sp, #16
 800599e:	4640      	mov	r0, r8
 80059a0:	f000 f882 	bl	8005aa8 <_printf_i>
 80059a4:	e7ea      	b.n	800597c <_svfiprintf_r+0x1b0>
 80059a6:	bf00      	nop
 80059a8:	08006228 	.word	0x08006228
 80059ac:	0800622e 	.word	0x0800622e
 80059b0:	08006232 	.word	0x08006232
 80059b4:	00000000 	.word	0x00000000
 80059b8:	08005719 	.word	0x08005719

080059bc <_printf_common>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	4691      	mov	r9, r2
 80059c2:	461f      	mov	r7, r3
 80059c4:	688a      	ldr	r2, [r1, #8]
 80059c6:	690b      	ldr	r3, [r1, #16]
 80059c8:	4606      	mov	r6, r0
 80059ca:	4293      	cmp	r3, r2
 80059cc:	bfb8      	it	lt
 80059ce:	4613      	movlt	r3, r2
 80059d0:	f8c9 3000 	str.w	r3, [r9]
 80059d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059d8:	460c      	mov	r4, r1
 80059da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059de:	b112      	cbz	r2, 80059e6 <_printf_common+0x2a>
 80059e0:	3301      	adds	r3, #1
 80059e2:	f8c9 3000 	str.w	r3, [r9]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	0699      	lsls	r1, r3, #26
 80059ea:	bf42      	ittt	mi
 80059ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80059f0:	3302      	addmi	r3, #2
 80059f2:	f8c9 3000 	strmi.w	r3, [r9]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d107      	bne.n	8005a0e <_printf_common+0x52>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	f8d9 2000 	ldr.w	r2, [r9]
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	42ab      	cmp	r3, r5
 8005a0c:	dc29      	bgt.n	8005a62 <_printf_common+0xa6>
 8005a0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	3300      	adds	r3, #0
 8005a16:	bf18      	it	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	0692      	lsls	r2, r2, #26
 8005a1c:	d42e      	bmi.n	8005a7c <_printf_common+0xc0>
 8005a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a22:	4639      	mov	r1, r7
 8005a24:	4630      	mov	r0, r6
 8005a26:	47c0      	blx	r8
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d021      	beq.n	8005a70 <_printf_common+0xb4>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	68e5      	ldr	r5, [r4, #12]
 8005a30:	f003 0306 	and.w	r3, r3, #6
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	bf18      	it	ne
 8005a38:	2500      	movne	r5, #0
 8005a3a:	f8d9 2000 	ldr.w	r2, [r9]
 8005a3e:	f04f 0900 	mov.w	r9, #0
 8005a42:	bf08      	it	eq
 8005a44:	1aad      	subeq	r5, r5, r2
 8005a46:	68a3      	ldr	r3, [r4, #8]
 8005a48:	6922      	ldr	r2, [r4, #16]
 8005a4a:	bf08      	it	eq
 8005a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a50:	4293      	cmp	r3, r2
 8005a52:	bfc4      	itt	gt
 8005a54:	1a9b      	subgt	r3, r3, r2
 8005a56:	18ed      	addgt	r5, r5, r3
 8005a58:	341a      	adds	r4, #26
 8005a5a:	454d      	cmp	r5, r9
 8005a5c:	d11a      	bne.n	8005a94 <_printf_common+0xd8>
 8005a5e:	2000      	movs	r0, #0
 8005a60:	e008      	b.n	8005a74 <_printf_common+0xb8>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4652      	mov	r2, sl
 8005a66:	4639      	mov	r1, r7
 8005a68:	4630      	mov	r0, r6
 8005a6a:	47c0      	blx	r8
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d103      	bne.n	8005a78 <_printf_common+0xbc>
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a78:	3501      	adds	r5, #1
 8005a7a:	e7c2      	b.n	8005a02 <_printf_common+0x46>
 8005a7c:	2030      	movs	r0, #48	; 0x30
 8005a7e:	18e1      	adds	r1, r4, r3
 8005a80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a8a:	4422      	add	r2, r4
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a92:	e7c4      	b.n	8005a1e <_printf_common+0x62>
 8005a94:	2301      	movs	r3, #1
 8005a96:	4622      	mov	r2, r4
 8005a98:	4639      	mov	r1, r7
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	47c0      	blx	r8
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d0e6      	beq.n	8005a70 <_printf_common+0xb4>
 8005aa2:	f109 0901 	add.w	r9, r9, #1
 8005aa6:	e7d8      	b.n	8005a5a <_printf_common+0x9e>

08005aa8 <_printf_i>:
 8005aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	7e09      	ldrb	r1, [r1, #24]
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	296e      	cmp	r1, #110	; 0x6e
 8005ab8:	4617      	mov	r7, r2
 8005aba:	4606      	mov	r6, r0
 8005abc:	4698      	mov	r8, r3
 8005abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ac0:	f000 80b3 	beq.w	8005c2a <_printf_i+0x182>
 8005ac4:	d822      	bhi.n	8005b0c <_printf_i+0x64>
 8005ac6:	2963      	cmp	r1, #99	; 0x63
 8005ac8:	d036      	beq.n	8005b38 <_printf_i+0x90>
 8005aca:	d80a      	bhi.n	8005ae2 <_printf_i+0x3a>
 8005acc:	2900      	cmp	r1, #0
 8005ace:	f000 80b9 	beq.w	8005c44 <_printf_i+0x19c>
 8005ad2:	2958      	cmp	r1, #88	; 0x58
 8005ad4:	f000 8083 	beq.w	8005bde <_printf_i+0x136>
 8005ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005adc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ae0:	e032      	b.n	8005b48 <_printf_i+0xa0>
 8005ae2:	2964      	cmp	r1, #100	; 0x64
 8005ae4:	d001      	beq.n	8005aea <_printf_i+0x42>
 8005ae6:	2969      	cmp	r1, #105	; 0x69
 8005ae8:	d1f6      	bne.n	8005ad8 <_printf_i+0x30>
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	6813      	ldr	r3, [r2, #0]
 8005aee:	0605      	lsls	r5, r0, #24
 8005af0:	f103 0104 	add.w	r1, r3, #4
 8005af4:	d52a      	bpl.n	8005b4c <_printf_i+0xa4>
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6011      	str	r1, [r2, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da03      	bge.n	8005b06 <_printf_i+0x5e>
 8005afe:	222d      	movs	r2, #45	; 0x2d
 8005b00:	425b      	negs	r3, r3
 8005b02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b06:	486f      	ldr	r0, [pc, #444]	; (8005cc4 <_printf_i+0x21c>)
 8005b08:	220a      	movs	r2, #10
 8005b0a:	e039      	b.n	8005b80 <_printf_i+0xd8>
 8005b0c:	2973      	cmp	r1, #115	; 0x73
 8005b0e:	f000 809d 	beq.w	8005c4c <_printf_i+0x1a4>
 8005b12:	d808      	bhi.n	8005b26 <_printf_i+0x7e>
 8005b14:	296f      	cmp	r1, #111	; 0x6f
 8005b16:	d020      	beq.n	8005b5a <_printf_i+0xb2>
 8005b18:	2970      	cmp	r1, #112	; 0x70
 8005b1a:	d1dd      	bne.n	8005ad8 <_printf_i+0x30>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	f043 0320 	orr.w	r3, r3, #32
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	e003      	b.n	8005b2e <_printf_i+0x86>
 8005b26:	2975      	cmp	r1, #117	; 0x75
 8005b28:	d017      	beq.n	8005b5a <_printf_i+0xb2>
 8005b2a:	2978      	cmp	r1, #120	; 0x78
 8005b2c:	d1d4      	bne.n	8005ad8 <_printf_i+0x30>
 8005b2e:	2378      	movs	r3, #120	; 0x78
 8005b30:	4865      	ldr	r0, [pc, #404]	; (8005cc8 <_printf_i+0x220>)
 8005b32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b36:	e055      	b.n	8005be4 <_printf_i+0x13c>
 8005b38:	6813      	ldr	r3, [r2, #0]
 8005b3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b3e:	1d19      	adds	r1, r3, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6011      	str	r1, [r2, #0]
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e08c      	b.n	8005c66 <_printf_i+0x1be>
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b52:	6011      	str	r1, [r2, #0]
 8005b54:	bf18      	it	ne
 8005b56:	b21b      	sxthne	r3, r3
 8005b58:	e7cf      	b.n	8005afa <_printf_i+0x52>
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	6825      	ldr	r5, [r4, #0]
 8005b5e:	1d18      	adds	r0, r3, #4
 8005b60:	6010      	str	r0, [r2, #0]
 8005b62:	0628      	lsls	r0, r5, #24
 8005b64:	d501      	bpl.n	8005b6a <_printf_i+0xc2>
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	e002      	b.n	8005b70 <_printf_i+0xc8>
 8005b6a:	0668      	lsls	r0, r5, #25
 8005b6c:	d5fb      	bpl.n	8005b66 <_printf_i+0xbe>
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	296f      	cmp	r1, #111	; 0x6f
 8005b72:	bf14      	ite	ne
 8005b74:	220a      	movne	r2, #10
 8005b76:	2208      	moveq	r2, #8
 8005b78:	4852      	ldr	r0, [pc, #328]	; (8005cc4 <_printf_i+0x21c>)
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b80:	6865      	ldr	r5, [r4, #4]
 8005b82:	2d00      	cmp	r5, #0
 8005b84:	60a5      	str	r5, [r4, #8]
 8005b86:	f2c0 8095 	blt.w	8005cb4 <_printf_i+0x20c>
 8005b8a:	6821      	ldr	r1, [r4, #0]
 8005b8c:	f021 0104 	bic.w	r1, r1, #4
 8005b90:	6021      	str	r1, [r4, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d13d      	bne.n	8005c12 <_printf_i+0x16a>
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	f040 808e 	bne.w	8005cb8 <_printf_i+0x210>
 8005b9c:	4665      	mov	r5, ip
 8005b9e:	2a08      	cmp	r2, #8
 8005ba0:	d10b      	bne.n	8005bba <_printf_i+0x112>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	07db      	lsls	r3, r3, #31
 8005ba6:	d508      	bpl.n	8005bba <_printf_i+0x112>
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	6862      	ldr	r2, [r4, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	bfde      	ittt	le
 8005bb0:	2330      	movle	r3, #48	; 0x30
 8005bb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bb6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005bba:	ebac 0305 	sub.w	r3, ip, r5
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	f8cd 8000 	str.w	r8, [sp]
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	aa03      	add	r2, sp, #12
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7ff fef6 	bl	80059bc <_printf_common>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d14d      	bne.n	8005c70 <_printf_i+0x1c8>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bd8:	b005      	add	sp, #20
 8005bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bde:	4839      	ldr	r0, [pc, #228]	; (8005cc4 <_printf_i+0x21c>)
 8005be0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005be4:	6813      	ldr	r3, [r2, #0]
 8005be6:	6821      	ldr	r1, [r4, #0]
 8005be8:	1d1d      	adds	r5, r3, #4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6015      	str	r5, [r2, #0]
 8005bee:	060a      	lsls	r2, r1, #24
 8005bf0:	d50b      	bpl.n	8005c0a <_printf_i+0x162>
 8005bf2:	07ca      	lsls	r2, r1, #31
 8005bf4:	bf44      	itt	mi
 8005bf6:	f041 0120 	orrmi.w	r1, r1, #32
 8005bfa:	6021      	strmi	r1, [r4, #0]
 8005bfc:	b91b      	cbnz	r3, 8005c06 <_printf_i+0x15e>
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	f022 0220 	bic.w	r2, r2, #32
 8005c04:	6022      	str	r2, [r4, #0]
 8005c06:	2210      	movs	r2, #16
 8005c08:	e7b7      	b.n	8005b7a <_printf_i+0xd2>
 8005c0a:	064d      	lsls	r5, r1, #25
 8005c0c:	bf48      	it	mi
 8005c0e:	b29b      	uxthmi	r3, r3
 8005c10:	e7ef      	b.n	8005bf2 <_printf_i+0x14a>
 8005c12:	4665      	mov	r5, ip
 8005c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c18:	fb02 3311 	mls	r3, r2, r1, r3
 8005c1c:	5cc3      	ldrb	r3, [r0, r3]
 8005c1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c22:	460b      	mov	r3, r1
 8005c24:	2900      	cmp	r1, #0
 8005c26:	d1f5      	bne.n	8005c14 <_printf_i+0x16c>
 8005c28:	e7b9      	b.n	8005b9e <_printf_i+0xf6>
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	6825      	ldr	r5, [r4, #0]
 8005c2e:	1d18      	adds	r0, r3, #4
 8005c30:	6961      	ldr	r1, [r4, #20]
 8005c32:	6010      	str	r0, [r2, #0]
 8005c34:	0628      	lsls	r0, r5, #24
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	d501      	bpl.n	8005c3e <_printf_i+0x196>
 8005c3a:	6019      	str	r1, [r3, #0]
 8005c3c:	e002      	b.n	8005c44 <_printf_i+0x19c>
 8005c3e:	066a      	lsls	r2, r5, #25
 8005c40:	d5fb      	bpl.n	8005c3a <_printf_i+0x192>
 8005c42:	8019      	strh	r1, [r3, #0]
 8005c44:	2300      	movs	r3, #0
 8005c46:	4665      	mov	r5, ip
 8005c48:	6123      	str	r3, [r4, #16]
 8005c4a:	e7b9      	b.n	8005bc0 <_printf_i+0x118>
 8005c4c:	6813      	ldr	r3, [r2, #0]
 8005c4e:	1d19      	adds	r1, r3, #4
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	681d      	ldr	r5, [r3, #0]
 8005c54:	6862      	ldr	r2, [r4, #4]
 8005c56:	2100      	movs	r1, #0
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 f837 	bl	8005ccc <memchr>
 8005c5e:	b108      	cbz	r0, 8005c64 <_printf_i+0x1bc>
 8005c60:	1b40      	subs	r0, r0, r5
 8005c62:	6060      	str	r0, [r4, #4]
 8005c64:	6863      	ldr	r3, [r4, #4]
 8005c66:	6123      	str	r3, [r4, #16]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c6e:	e7a7      	b.n	8005bc0 <_printf_i+0x118>
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	462a      	mov	r2, r5
 8005c74:	4639      	mov	r1, r7
 8005c76:	4630      	mov	r0, r6
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d0aa      	beq.n	8005bd4 <_printf_i+0x12c>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	079b      	lsls	r3, r3, #30
 8005c82:	d413      	bmi.n	8005cac <_printf_i+0x204>
 8005c84:	68e0      	ldr	r0, [r4, #12]
 8005c86:	9b03      	ldr	r3, [sp, #12]
 8005c88:	4298      	cmp	r0, r3
 8005c8a:	bfb8      	it	lt
 8005c8c:	4618      	movlt	r0, r3
 8005c8e:	e7a3      	b.n	8005bd8 <_printf_i+0x130>
 8005c90:	2301      	movs	r3, #1
 8005c92:	464a      	mov	r2, r9
 8005c94:	4639      	mov	r1, r7
 8005c96:	4630      	mov	r0, r6
 8005c98:	47c0      	blx	r8
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d09a      	beq.n	8005bd4 <_printf_i+0x12c>
 8005c9e:	3501      	adds	r5, #1
 8005ca0:	68e3      	ldr	r3, [r4, #12]
 8005ca2:	9a03      	ldr	r2, [sp, #12]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	42ab      	cmp	r3, r5
 8005ca8:	dcf2      	bgt.n	8005c90 <_printf_i+0x1e8>
 8005caa:	e7eb      	b.n	8005c84 <_printf_i+0x1dc>
 8005cac:	2500      	movs	r5, #0
 8005cae:	f104 0919 	add.w	r9, r4, #25
 8005cb2:	e7f5      	b.n	8005ca0 <_printf_i+0x1f8>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1ac      	bne.n	8005c12 <_printf_i+0x16a>
 8005cb8:	7803      	ldrb	r3, [r0, #0]
 8005cba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cc2:	e76c      	b.n	8005b9e <_printf_i+0xf6>
 8005cc4:	08006239 	.word	0x08006239
 8005cc8:	0800624a 	.word	0x0800624a

08005ccc <memchr>:
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	b2c9      	uxtb	r1, r1
 8005cd0:	4402      	add	r2, r0
 8005cd2:	4290      	cmp	r0, r2
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	d101      	bne.n	8005cdc <memchr+0x10>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e003      	b.n	8005ce4 <memchr+0x18>
 8005cdc:	781c      	ldrb	r4, [r3, #0]
 8005cde:	3001      	adds	r0, #1
 8005ce0:	428c      	cmp	r4, r1
 8005ce2:	d1f6      	bne.n	8005cd2 <memchr+0x6>
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd10      	pop	{r4, pc}

08005ce8 <memmove>:
 8005ce8:	4288      	cmp	r0, r1
 8005cea:	b510      	push	{r4, lr}
 8005cec:	eb01 0302 	add.w	r3, r1, r2
 8005cf0:	d807      	bhi.n	8005d02 <memmove+0x1a>
 8005cf2:	1e42      	subs	r2, r0, #1
 8005cf4:	4299      	cmp	r1, r3
 8005cf6:	d00a      	beq.n	8005d0e <memmove+0x26>
 8005cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cfc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d00:	e7f8      	b.n	8005cf4 <memmove+0xc>
 8005d02:	4283      	cmp	r3, r0
 8005d04:	d9f5      	bls.n	8005cf2 <memmove+0xa>
 8005d06:	1881      	adds	r1, r0, r2
 8005d08:	1ad2      	subs	r2, r2, r3
 8005d0a:	42d3      	cmn	r3, r2
 8005d0c:	d100      	bne.n	8005d10 <memmove+0x28>
 8005d0e:	bd10      	pop	{r4, pc}
 8005d10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d18:	e7f7      	b.n	8005d0a <memmove+0x22>
	...

08005d1c <_free_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4605      	mov	r5, r0
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d043      	beq.n	8005dac <_free_r+0x90>
 8005d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d28:	1f0c      	subs	r4, r1, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bfb8      	it	lt
 8005d2e:	18e4      	addlt	r4, r4, r3
 8005d30:	f000 f8d0 	bl	8005ed4 <__malloc_lock>
 8005d34:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <_free_r+0x94>)
 8005d36:	6813      	ldr	r3, [r2, #0]
 8005d38:	4610      	mov	r0, r2
 8005d3a:	b933      	cbnz	r3, 8005d4a <_free_r+0x2e>
 8005d3c:	6063      	str	r3, [r4, #4]
 8005d3e:	6014      	str	r4, [r2, #0]
 8005d40:	4628      	mov	r0, r5
 8005d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d46:	f000 b8c6 	b.w	8005ed6 <__malloc_unlock>
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	d90b      	bls.n	8005d66 <_free_r+0x4a>
 8005d4e:	6821      	ldr	r1, [r4, #0]
 8005d50:	1862      	adds	r2, r4, r1
 8005d52:	4293      	cmp	r3, r2
 8005d54:	bf01      	itttt	eq
 8005d56:	681a      	ldreq	r2, [r3, #0]
 8005d58:	685b      	ldreq	r3, [r3, #4]
 8005d5a:	1852      	addeq	r2, r2, r1
 8005d5c:	6022      	streq	r2, [r4, #0]
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6004      	str	r4, [r0, #0]
 8005d62:	e7ed      	b.n	8005d40 <_free_r+0x24>
 8005d64:	4613      	mov	r3, r2
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	b10a      	cbz	r2, 8005d6e <_free_r+0x52>
 8005d6a:	42a2      	cmp	r2, r4
 8005d6c:	d9fa      	bls.n	8005d64 <_free_r+0x48>
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	1858      	adds	r0, r3, r1
 8005d72:	42a0      	cmp	r0, r4
 8005d74:	d10b      	bne.n	8005d8e <_free_r+0x72>
 8005d76:	6820      	ldr	r0, [r4, #0]
 8005d78:	4401      	add	r1, r0
 8005d7a:	1858      	adds	r0, r3, r1
 8005d7c:	4282      	cmp	r2, r0
 8005d7e:	6019      	str	r1, [r3, #0]
 8005d80:	d1de      	bne.n	8005d40 <_free_r+0x24>
 8005d82:	6810      	ldr	r0, [r2, #0]
 8005d84:	6852      	ldr	r2, [r2, #4]
 8005d86:	4401      	add	r1, r0
 8005d88:	6019      	str	r1, [r3, #0]
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	e7d8      	b.n	8005d40 <_free_r+0x24>
 8005d8e:	d902      	bls.n	8005d96 <_free_r+0x7a>
 8005d90:	230c      	movs	r3, #12
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	e7d4      	b.n	8005d40 <_free_r+0x24>
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	1821      	adds	r1, r4, r0
 8005d9a:	428a      	cmp	r2, r1
 8005d9c:	bf01      	itttt	eq
 8005d9e:	6811      	ldreq	r1, [r2, #0]
 8005da0:	6852      	ldreq	r2, [r2, #4]
 8005da2:	1809      	addeq	r1, r1, r0
 8005da4:	6021      	streq	r1, [r4, #0]
 8005da6:	6062      	str	r2, [r4, #4]
 8005da8:	605c      	str	r4, [r3, #4]
 8005daa:	e7c9      	b.n	8005d40 <_free_r+0x24>
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	20001034 	.word	0x20001034

08005db4 <_malloc_r>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	1ccd      	adds	r5, r1, #3
 8005db8:	f025 0503 	bic.w	r5, r5, #3
 8005dbc:	3508      	adds	r5, #8
 8005dbe:	2d0c      	cmp	r5, #12
 8005dc0:	bf38      	it	cc
 8005dc2:	250c      	movcc	r5, #12
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	db01      	blt.n	8005dce <_malloc_r+0x1a>
 8005dca:	42a9      	cmp	r1, r5
 8005dcc:	d903      	bls.n	8005dd6 <_malloc_r+0x22>
 8005dce:	230c      	movs	r3, #12
 8005dd0:	6033      	str	r3, [r6, #0]
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	bd70      	pop	{r4, r5, r6, pc}
 8005dd6:	f000 f87d 	bl	8005ed4 <__malloc_lock>
 8005dda:	4a21      	ldr	r2, [pc, #132]	; (8005e60 <_malloc_r+0xac>)
 8005ddc:	6814      	ldr	r4, [r2, #0]
 8005dde:	4621      	mov	r1, r4
 8005de0:	b991      	cbnz	r1, 8005e08 <_malloc_r+0x54>
 8005de2:	4c20      	ldr	r4, [pc, #128]	; (8005e64 <_malloc_r+0xb0>)
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	b91b      	cbnz	r3, 8005df0 <_malloc_r+0x3c>
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 f863 	bl	8005eb4 <_sbrk_r>
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	4629      	mov	r1, r5
 8005df2:	4630      	mov	r0, r6
 8005df4:	f000 f85e 	bl	8005eb4 <_sbrk_r>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d124      	bne.n	8005e46 <_malloc_r+0x92>
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	4630      	mov	r0, r6
 8005e00:	6033      	str	r3, [r6, #0]
 8005e02:	f000 f868 	bl	8005ed6 <__malloc_unlock>
 8005e06:	e7e4      	b.n	8005dd2 <_malloc_r+0x1e>
 8005e08:	680b      	ldr	r3, [r1, #0]
 8005e0a:	1b5b      	subs	r3, r3, r5
 8005e0c:	d418      	bmi.n	8005e40 <_malloc_r+0x8c>
 8005e0e:	2b0b      	cmp	r3, #11
 8005e10:	d90f      	bls.n	8005e32 <_malloc_r+0x7e>
 8005e12:	600b      	str	r3, [r1, #0]
 8005e14:	18cc      	adds	r4, r1, r3
 8005e16:	50cd      	str	r5, [r1, r3]
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f85c 	bl	8005ed6 <__malloc_unlock>
 8005e1e:	f104 000b 	add.w	r0, r4, #11
 8005e22:	1d23      	adds	r3, r4, #4
 8005e24:	f020 0007 	bic.w	r0, r0, #7
 8005e28:	1ac3      	subs	r3, r0, r3
 8005e2a:	d0d3      	beq.n	8005dd4 <_malloc_r+0x20>
 8005e2c:	425a      	negs	r2, r3
 8005e2e:	50e2      	str	r2, [r4, r3]
 8005e30:	e7d0      	b.n	8005dd4 <_malloc_r+0x20>
 8005e32:	684b      	ldr	r3, [r1, #4]
 8005e34:	428c      	cmp	r4, r1
 8005e36:	bf16      	itet	ne
 8005e38:	6063      	strne	r3, [r4, #4]
 8005e3a:	6013      	streq	r3, [r2, #0]
 8005e3c:	460c      	movne	r4, r1
 8005e3e:	e7eb      	b.n	8005e18 <_malloc_r+0x64>
 8005e40:	460c      	mov	r4, r1
 8005e42:	6849      	ldr	r1, [r1, #4]
 8005e44:	e7cc      	b.n	8005de0 <_malloc_r+0x2c>
 8005e46:	1cc4      	adds	r4, r0, #3
 8005e48:	f024 0403 	bic.w	r4, r4, #3
 8005e4c:	42a0      	cmp	r0, r4
 8005e4e:	d005      	beq.n	8005e5c <_malloc_r+0xa8>
 8005e50:	1a21      	subs	r1, r4, r0
 8005e52:	4630      	mov	r0, r6
 8005e54:	f000 f82e 	bl	8005eb4 <_sbrk_r>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d0cf      	beq.n	8005dfc <_malloc_r+0x48>
 8005e5c:	6025      	str	r5, [r4, #0]
 8005e5e:	e7db      	b.n	8005e18 <_malloc_r+0x64>
 8005e60:	20001034 	.word	0x20001034
 8005e64:	20001038 	.word	0x20001038

08005e68 <_realloc_r>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	4614      	mov	r4, r2
 8005e6e:	460e      	mov	r6, r1
 8005e70:	b921      	cbnz	r1, 8005e7c <_realloc_r+0x14>
 8005e72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e76:	4611      	mov	r1, r2
 8005e78:	f7ff bf9c 	b.w	8005db4 <_malloc_r>
 8005e7c:	b922      	cbnz	r2, 8005e88 <_realloc_r+0x20>
 8005e7e:	f7ff ff4d 	bl	8005d1c <_free_r>
 8005e82:	4625      	mov	r5, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e88:	f000 f826 	bl	8005ed8 <_malloc_usable_size_r>
 8005e8c:	42a0      	cmp	r0, r4
 8005e8e:	d20f      	bcs.n	8005eb0 <_realloc_r+0x48>
 8005e90:	4621      	mov	r1, r4
 8005e92:	4638      	mov	r0, r7
 8005e94:	f7ff ff8e 	bl	8005db4 <_malloc_r>
 8005e98:	4605      	mov	r5, r0
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d0f2      	beq.n	8005e84 <_realloc_r+0x1c>
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	f7ff fc05 	bl	80056b0 <memcpy>
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7ff ff37 	bl	8005d1c <_free_r>
 8005eae:	e7e9      	b.n	8005e84 <_realloc_r+0x1c>
 8005eb0:	4635      	mov	r5, r6
 8005eb2:	e7e7      	b.n	8005e84 <_realloc_r+0x1c>

08005eb4 <_sbrk_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	4c05      	ldr	r4, [pc, #20]	; (8005ed0 <_sbrk_r+0x1c>)
 8005eba:	4605      	mov	r5, r0
 8005ebc:	4608      	mov	r0, r1
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	f7fa fe28 	bl	8000b14 <_sbrk>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_sbrk_r+0x1a>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_sbrk_r+0x1a>
 8005ecc:	602b      	str	r3, [r5, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	200011ec 	.word	0x200011ec

08005ed4 <__malloc_lock>:
 8005ed4:	4770      	bx	lr

08005ed6 <__malloc_unlock>:
 8005ed6:	4770      	bx	lr

08005ed8 <_malloc_usable_size_r>:
 8005ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005edc:	1f18      	subs	r0, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfbc      	itt	lt
 8005ee2:	580b      	ldrlt	r3, [r1, r0]
 8005ee4:	18c0      	addlt	r0, r0, r3
 8005ee6:	4770      	bx	lr

08005ee8 <_init>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr

08005ef4 <_fini>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	bf00      	nop
 8005ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efa:	bc08      	pop	{r3}
 8005efc:	469e      	mov	lr, r3
 8005efe:	4770      	bx	lr
